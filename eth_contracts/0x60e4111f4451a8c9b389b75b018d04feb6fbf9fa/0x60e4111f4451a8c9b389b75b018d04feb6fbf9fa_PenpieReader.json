{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/chainlink/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\"\r\n    },\r\n    \"contracts/interfaces/pendle/IPVeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity =0.8.19;\\n\\ninterface IPVeToken {\\n    // ============= USER INFO =============\\n\\n    function balanceOf(address user) external view returns (uint128);\\n\\n    function positionData(address user) external view returns (uint128 amount, uint128 expiry);\\n\\n    // ============= META DATA =============\\n\\n    function totalSupplyStored() external view returns (uint128);\\n\\n    function totalSupplyCurrent() external returns (uint128);\\n\\n    function totalSupplyAndBalanceCurrent(address user) external returns (uint128, uint128);\\n}\"\r\n    },\r\n    \"contracts/interfaces/penpieReader/IMasterPenpieReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\n\\ninterface IMasterPenpieReader {\\n    function poolLength() external view returns (uint256);\\n    function penpieOFT() external view returns (address);\\n    function vlPenpie() external view returns (address);\\n    function registeredToken(uint256) external view returns (address);\\n    struct PenpiePoolInfo {\\n        address stakingToken; // Address of staking token contract to be staked.\\n        address receiptToken; // Address of receipt token contract represent a staking position\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Penpies to distribute per second.\\n        uint256 lastRewardTimestamp; // Last timestamp that Penpies distribution occurs.\\n        uint256 accPenpiePerShare; // Accumulated Penpies per share, times 1e12. See below.\\n        uint256 totalStaked;\\n        address rewarder;\\n        bool    isActive;  \\n    }\\n    function tokenToPoolInfo(address) external view returns (PenpiePoolInfo memory);\\n    function getPoolInfo(address) external view returns (uint256, uint256, uint256, uint256);\\n    function allPendingTokens(address _stakingToken, address _user)\\n        external view returns (\\n            uint256 pendingPenpie,\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusRewards);\\n    function stakingInfo(address _stakingToken, address _user)\\n        external\\n        view\\n        returns (uint256 stakedAmount, uint256 availableAmount);\\n}\"\r\n    },\r\n    \"contracts/interfaces/penpieReader/IPendleMarketReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\ninterface IPendleMarketReader  {\\n    function activeBalance(address) external view returns (uint256);\\n    function readTokens() external view returns (\\n        address _SY,\\n        address _PT,\\n        address _YT\\n    );\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/penpieReader/IPendleStakingReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\n\\ninterface IPendleStakingReader {\\n  \\n    struct PendleStakingPoolInfo {\\n        address market;\\n        address rewarder;\\n        address helper;\\n        address receiptToken;\\n        uint256 lastHarvestTime;\\n        bool isActive;\\n    }\\n    function pools(address) external view returns (PendleStakingPoolInfo memory);\\n    function mPendleOFT() external view returns (address);\\n    function PENDLE() external view returns (address);\\n    function WETH() external view returns (address);\\n    function mPendleConvertor() external view returns (address);\\n    function autoBribeFee() external view returns (uint256);\\n    function accumulatedVePendle() external view returns (uint256);\\n    function vePendle() external view returns (address);    \\n}\"\r\n    },\r\n    \"contracts/interfaces/penpieReader/IPendleVoteManagerReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\n\\ninterface IPendleVoteManagerReader {\\n  \\n    function getPoolsLength() external view returns(uint256);\\n    function lastCastTime() external view returns(uint256);\\n    function totalVlPenpieInVote() external view returns(uint256);\\n    function poolInfos(uint256) external view returns (address, uint256, uint256, bool);\\n    function userVotedForPoolInVlPenpie(address, address) external view returns (uint256);\\n     \\n    function userTotalVotedInVlPenpie(address _user) external view returns(uint256);\\n    function getUserVotable(address _user) external view returns (uint256);\\n    function getUserVoteForPoolsInVlPenpie(address[] calldata lps, address _user)\\n        external\\n        view\\n        returns (uint256[] memory votes);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/penpieReader/IPenpieBribeManagerReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\n\\ninterface IPenpieBribeManagerReader {\\n    function getCurrentEpochEndTime() external view returns(uint256 endTime);\\n    function voteManager() external view returns(address);\\n    struct IBribe {\\n        address _token;\\n        uint256 _amount;\\n    } \\n    function getBribesInAllPools(uint256 _epoch) external view returns (IBribe[][] memory);\\n    function exactCurrentEpoch() external view returns(uint256);\\n    function getApprovedTokens() external view returns(address[] memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/penpieReader/IPenpieReceiptTokenReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\n\\ninterface IPenpieReceiptTokenReader {\\n\\n    function underlying() external view returns (address);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/penpieReader/IVLPenpieReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\n\\ninterface IVLPenpieReader {\\n     struct UserUnlocking {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 amountInCoolDown; // total amount comitted to the unlock slot, never changes except when reseting slot\\n     }    \\n    function getUserUnlockingSchedule(address _user) external view returns (UserUnlocking[] memory slots);\\n    function getUserAmountInCoolDown(address _user) external view returns (uint256);\\n    function totalLocked() external view returns (uint256);\\n    function getFullyUnlock(address _user) external view returns(uint256 unlockedAmount);\\n    function getRewardablePercentWAD(address _user) external view returns(uint256 percent);\\n    function totalAmountInCoolDown() external view returns (uint256);\\n    function getUserNthUnlockSlot(address _user, uint256 n) external view returns (\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 amountInCoolDown\\n    );\\n\\n    function getUserUnlockSlotLength(address _user) external view returns (uint256);\\n    function getNextAvailableUnlockSlot(address _user) external view returns (uint256);\\n    function getUserTotalLocked(address _user) external view returns (uint256);\\n    function expectedPenaltyAmount(uint256 _slotIndex) external view returns(uint256 penaltyAmount, uint256 amountToUser) ;\\n    function expectedPenaltyAmountByAccount(address account, uint256 _slotIndex) external view returns(uint256 penaltyAmount, uint256 amountToUser) ;\\n    function totalPenalty() external view returns (uint256);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/traderjoeV2/ILBQuoter.sol\": {\r\n      \"content\": \"pragma solidity =0.8.19;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ILBRouter } from \\\"./ILBRouter.sol\\\";\\n\\ninterface ILBQuoter {\\n\\n   struct Quote {\\n        address[] route;\\n        address[] pairs;\\n        uint256[] binSteps;\\n        uint256[] amounts;\\n        uint256[] virtualAmountsWithoutSlippage;\\n        uint256[] fees;\\n    }\\n\\n    function findBestPathFromAmountIn(address[] calldata route, uint256 amountIn)\\n        external\\n        view\\n    returns (Quote memory quote);\\n}\"\r\n    },\r\n    \"contracts/interfaces/traderjoeV2/ILBRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title Liquidity Book Router Interface\\n * @author Trader Joe\\n * @notice Required interface of LBRouter contract\\n */\\ninterface ILBRouter {\\n\\n    enum Version {\\n        V1,\\n        V2,\\n        V2_1\\n    }\\n\\n    /**\\n     * @dev The path parameters, such as:\\n     * - pairBinSteps: The list of bin steps of the pairs to go through\\n     * - versions: The list of versions of the pairs to go through\\n     * - tokenPath: The list of tokens in the path to go through\\n     */\\n    struct Path {\\n        uint256[] pairBinSteps;\\n        Version[] versions;\\n        IERC20[] tokenPath;\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n}\"\r\n    },\r\n    \"contracts/interfaces/uniswapV2/ICamelotPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\ninterface ICamelotPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint16 token0feePercent, uint16 token1FeePercent);\\n    function getAmountOut(uint amountIn, address tokenIn) external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function setFeePercent(uint16 token0FeePercent, uint16 token1FeePercent) external;\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data, address referrer) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/uniswapV2/ICamelotRouter.sol\": {\r\n      \"content\": \"pragma solidity =0.8.19;\\n\\ninterface ICamelotRouter {\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"contracts/interfaces/uniswapV3/IUniswapV3Pool.sol\": {\r\n      \"content\": \"pragma solidity =0.8.19;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IUniswapV3Pool {\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );    \\n}\"\r\n    },\r\n    \"contracts/PenpieReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20, ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {ICamelotPair} from \\\"./interfaces/uniswapV2/ICamelotPair.sol\\\";\\nimport {AggregatorV3Interface} from \\\"./interfaces/chainlink/AggregatorV3Interface.sol\\\";\\nimport {IUniswapV3Pool} from \\\"./interfaces/uniswapV3/IUniswapV3Pool.sol\\\";\\nimport {ICamelotRouter} from \\\"./interfaces/uniswapV2/ICamelotRouter.sol\\\";\\nimport {ILBQuoter} from \\\"./interfaces/traderjoeV2/ILBQuoter.sol\\\";\\nimport {IMasterPenpieReader} from \\\"./interfaces/penpieReader/IMasterPenpieReader.sol\\\";\\nimport {IPendleStakingReader} from \\\"./interfaces/penpieReader/IPendleStakingReader.sol\\\";\\nimport {IPenpieReceiptTokenReader} from \\\"./interfaces/penpieReader/IPenpieReceiptTokenReader.sol\\\";\\nimport {IPendleMarketReader} from \\\"./interfaces/penpieReader/IPendleMarketReader.sol\\\";\\nimport {IVLPenpieReader} from \\\"./interfaces/penpieReader/IVLPenpieReader.sol\\\";\\nimport {IPenpieBribeManagerReader} from \\\"./interfaces/penpieReader/IPenpieBribeManagerReader.sol\\\";\\nimport {IPendleVoteManagerReader} from \\\"./interfaces/penpieReader/IPendleVoteManagerReader.sol\\\";\\nimport {IPVeToken} from \\\"./interfaces/pendle/IPVeToken.sol\\\"; \\n/// @title MagpieReader for Arbitrum\\n/// @author Magpie Team\\n\\ncontract PenpieReader is Initializable, OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    struct TokenPrice {\\n        address token;\\n        string  symbol;\\n        uint256 price;\\n    }\\n\\n    struct TokenRouter {\\n        address token;\\n        string symbol;\\n        uint256 decimals;\\n        address[] paths;\\n        address[] pools;\\n        address chainlink;\\n        uint256 routerType;\\n    }\\n\\n    struct PenpieInfo {\\n        address masterPenpie;\\n        address pendleStaking;\\n        address vlPenpie;\\n        address penpieOFT;\\n        address mPendleOFT;\\n        address PENDLE;\\n        address WETH;\\n        address mPendleConvertor;\\n        uint256 autoBribeFee;\\n        PenpiePool[] pools;\\n    }\\n\\n    struct PenpiePool {\\n        uint256 poolId;\\n        address stakingToken; // Address of staking token contract to be staked.\\n        address receiptToken; // Address of receipt token contract represent a staking position\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Penpies to distribute per second.\\n        uint256 lastRewardTimestamp; // Last timestamp that Penpies distribution occurs.\\n        uint256 accPenpiePerShare; // Accumulated Penpies per share, times 1e12. See below.\\n        uint256 totalStaked;\\n        uint256 emission;\\n        uint256 allocpoint;\\n        uint256 sizeOfPool;\\n        uint256 totalPoint;\\n        address rewarder;\\n        bool    isActive;  \\n        bool isPendleMarket;\\n        string poolType;\\n        ERC20TokenInfo stakedTokenInfo;\\n        PendleMarket pendleMarket;\\n        PendleStakingPoolInfo pendleStakingPoolInfo;\\n        PenpieAccountInfo  accountInfo;\\n        PenpieRewardInfo rewardInfo;\\n        VlPenpieLockInfo vlPenpieLockInfo;\\n    }\\n\\n    struct VlPenpieLockInfo {\\n        uint256 userTotalLocked;\\n        uint256 userAmountInCoolDown;\\n        VlPenpieUserUnlocking[] userUnlockingSchedule;\\n        uint256 totalPenalty;\\n        uint256 nextAvailableUnlockSlot;\\n        bool isFull;\\n    }\\n\\n    struct VlPenpieUserUnlocking {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 amountInCoolDown; // total amount comitted to the unlock slot, never changes except when reseting slot\\n        uint256 expectedPenaltyAmount;\\n        uint256 amountToUser;\\n    }  \\n\\n    struct PenpieRewardInfo {\\n        uint256 pendingPenpie;\\n        address[]  bonusTokenAddresses;\\n        string[]  bonusTokenSymbols;\\n        uint256[]  pendingBonusRewards;\\n    }\\n\\n    struct PendleMarket {\\n       address marketAddress;\\n       ERC20TokenInfo SY;\\n       ERC20TokenInfo PT;\\n       ERC20TokenInfo YT;\\n    }\\n\\n    struct PenpieAccountInfo {\\n        \\n        uint256 balance;\\n        uint256 stakedAmount;\\n        uint256 stakingAllowance;\\n        uint256 availableAmount;\\n        uint256 mPendleConvertAllowance;\\n        uint256 lockPenpieAllowance;\\n        uint256 pendleBalance;\\n        uint256 penpieBalance;\\n    }\\n\\n    struct PendleStakingPoolInfo {\\n        address market;\\n        address rewarder;\\n        address helper;\\n        address receiptToken;\\n        uint256 lastHarvestTime;\\n        bool isActive;\\n        uint256 activeBalance;\\n        uint256 lpBalance;\\n    }\\n\\n    struct ERC20TokenInfo {\\n        address tokenAddress;\\n        string symbol;\\n        uint256 decimals;\\n    }\\n\\n    struct BribeInfo {\\n        uint256 currentEpochEndTime;\\n        uint256 userTotalVotedInVlPenpie;\\n        uint256 totalVlPenpieInVote;\\n        uint256 lastCastTime;\\n        uint256 userVotable;\\n        uint256 penpieVePendle;\\n        uint256 totalVePendle;\\n        ApprovedToken[] approvedTokens;\\n        BribePool[] pools;\\n    }\\n\\n    struct ApprovedToken {\\n        address token;\\n        ERC20TokenInfo tokenInfo;\\n        uint256 balanceOf;\\n        uint256 addBribeAllowance;\\n    }\\n\\n    struct BribePool {\\n        uint256  poolId;\\n        uint256  totalVoteInVlPenpie;\\n        uint256  userVotedForPoolInVlPenpie;\\n        \\n        address market;\\n        bool isActive;\\n        uint256 chainId;\\n        Bribe[] previousBribes;\\n        Bribe[] currentBribes;\\n    }\\n\\n    struct Bribe {\\n        address token;\\n        ERC20TokenInfo tokenInfo;\\n        uint256 amount;\\n    } \\n\\n   \\n\\n    /* ============ State Variables ============ */\\n\\n    mapping(address => TokenRouter) public tokenRouterMap;\\n    address[] public tokenList;\\n\\n    uint256 constant CamelotRouterType = 1;\\n    uint256 constant WombatRouterType = 2;\\n    uint256 constant ChainlinkType = 3;\\n    uint256 constant UniswapV3RouterType = 4;\\n    uint256 constant TraderJoeV2Type = 5;\\n    \\n    address constant public TraderJoeV2LBQuoter = 0x7f281f22eDB332807A039073a7F34A4A215bE89e;\\n    ICamelotRouter constant public CamelotRouter = ICamelotRouter(0xc873fEcbd354f5A56E00E710B90EF4201db2448d);\\n    address constant public WETH = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;\\n    IMasterPenpieReader public masterPenpie;\\n    IPendleStakingReader public pendleStaking;\\n    address public penpieOFT;\\n    address public vlPenpie;\\n    address public mPendleOFT;\\n    address public PENDLE;\\n    address public WETHToken;\\n    address public mPendleConvertor;\\n    address public Penpie;\\n    uint256 public autoBribeFee;\\n    IPenpieBribeManagerReader public penpieBribeManager;\\n    IPendleVoteManagerReader public penpieVoteManager;\\n\\n    /* ============ Events ============ */\\n\\n    /* ============ Errors ============ */\\n\\n    /* ============ Constructor ============ */\\n\\n    function __PenpieReader_init() public initializer {\\n        __Ownable_init();\\n    }\\n\\n    /* ============ External Getters ============ */\\n\\n    // function getUSDTPrice() public view returns (uint256) {\\n    //     return getTokenPrice(USDT, address(0));\\n    // }\\n\\n    // function getUSDCPrice() public view returns (uint256) {\\n    //     return getTokenPrice(USDC, address(0));\\n    // }    \\n\\n    function getWETHPrice() public view returns (uint256) {\\n        return getTokenPrice(WETH, address(0));\\n    }\\n\\n    // just to make frontend happy\\n    function getETHPrice() public view returns (uint256) {\\n        return getTokenPrice(WETH, address(0));\\n    }\\n\\n    function getTokenPrice(address token, address unitToken) public view returns (uint256) {\\n        TokenRouter memory tokenRouter = tokenRouterMap[token];\\n        uint256 amountOut = 0;\\n        if (tokenRouter.token != address(0)) {\\n           if (tokenRouter.routerType == CamelotRouterType) {\\n            uint256[] memory prices = CamelotRouter.getAmountsOut(10 ** tokenRouter.decimals , tokenRouter.paths);\\n            amountOut = prices[tokenRouter.paths.length - 1];\\n           }\\n           else if (tokenRouter.routerType == ChainlinkType) {\\n            AggregatorV3Interface aggregatorV3Interface = AggregatorV3Interface(tokenRouter.chainlink);\\n              (\\n                /* uint80 roundID */,\\n                int256 price,\\n                /*uint startedAt*/,\\n                /*uint timeStamp*/,\\n                /*uint80 answeredInRound*/\\n            ) = aggregatorV3Interface.latestRoundData();\\n            amountOut = uint256(price * 1e18 / 1e8);\\n           } else if (tokenRouter.routerType == UniswapV3RouterType) {\\n            IUniswapV3Pool pool = IUniswapV3Pool(tokenRouter.pools[0]);\\n            (uint160 sqrtPriceX96,,,,,,) =  pool.slot0();\\n            amountOut = uint(sqrtPriceX96) * (uint(sqrtPriceX96)) * (1e18) >> (96 * 2);\\n           } else if (tokenRouter.routerType == TraderJoeV2Type) {\\n            uint256[] memory quotes = (ILBQuoter(TraderJoeV2LBQuoter).findBestPathFromAmountIn(tokenRouter.paths, 10 ** tokenRouter.decimals)).amounts;\\n            amountOut = quotes[tokenRouter.paths.length - 1];\\n           }\\n       \\n        }\\n        if (unitToken == address(0)) {\\n            return amountOut;\\n        } \\n\\n        TokenRouter memory router = tokenRouterMap[unitToken];\\n        uint256 unitPrice;\\n        if (router.routerType != ChainlinkType) {\\n            address target = router.paths[router.paths.length - 1];\\n            unitPrice = getTokenPrice(unitToken, target);\\n        } else {\\n            unitPrice = getTokenPrice(unitToken, address(0));\\n        }\\n        \\n        uint256 uintDecimals =  ERC20(unitToken).decimals();\\n        return amountOut * unitPrice / (10 ** uintDecimals);\\n    }\\n\\n    function getAllTokenPrice() public view returns (TokenPrice[] memory) {\\n        TokenPrice[] memory items = new TokenPrice[](tokenList.length);\\n        for(uint256 i = 0; i < tokenList.length; i++) {\\n            TokenPrice memory tokenPrice;\\n            TokenRouter memory router = tokenRouterMap[tokenList[i]];\\n            address target;\\n\\n            if (router.routerType != ChainlinkType) {\\n                target = router.paths[router.paths.length - 1];\\n\\n            }\\n\\n            tokenPrice.price = getTokenPrice(tokenList[i], target);\\n            \\n            tokenPrice.symbol = router.symbol;\\n            tokenPrice.token = tokenList[i];\\n            items[i] = tokenPrice;\\n        }\\n        return items;\\n    }\\n\\n    function getERC20TokenInfo(address token) public view returns (ERC20TokenInfo memory) {\\n        ERC20TokenInfo memory tokenInfo;\\n        tokenInfo.tokenAddress = token;\\n        if (token == address(1)) {\\n            tokenInfo.symbol = \\\"ETH\\\";\\n            tokenInfo.decimals = 18;\\n            return tokenInfo;\\n        }\\n        ERC20 tokenContract = ERC20(token);\\n        tokenInfo.symbol = tokenContract.symbol();\\n        tokenInfo.decimals = tokenContract.decimals();\\n        return tokenInfo;\\n    }\\n\\n    function getPenpieInfo(address account)  external view returns (PenpieInfo memory) {\\n        PenpieInfo memory info;\\n        uint256 poolCount = masterPenpie.poolLength();\\n        PenpiePool[] memory pools = new PenpiePool[](poolCount);\\n        for (uint256 i = 0; i < poolCount; ++i) {\\n           pools[i] = getPenpiePoolInfo(i, account);\\n        }\\n        info.pools = pools;\\n        info.masterPenpie = address(masterPenpie);\\n        info.pendleStaking = address(pendleStaking);\\n        info.penpieOFT = penpieOFT;\\n        info.vlPenpie = vlPenpie;\\n        info.mPendleOFT = mPendleOFT;\\n        info.PENDLE = PENDLE;\\n        info.WETH = WETHToken;\\n        info.mPendleConvertor = mPendleConvertor;\\n        info.autoBribeFee = autoBribeFee;\\n        return info;\\n    }\\n\\n    function getPenpiePoolInfo(uint256 poolId, address account) public view returns (PenpiePool memory) {\\n        PenpiePool memory penpiePool;\\n        penpiePool.poolId = poolId;\\n        address registeredToken = masterPenpie.registeredToken(poolId);\\n        IMasterPenpieReader.PenpiePoolInfo memory penpiePoolInfo = masterPenpie.tokenToPoolInfo(registeredToken);\\n        penpiePool.stakingToken = penpiePoolInfo.stakingToken;\\n        penpiePool.allocPoint = penpiePoolInfo.allocPoint;\\n        penpiePool.lastRewardTimestamp = penpiePoolInfo.lastRewardTimestamp;\\n        penpiePool.accPenpiePerShare = penpiePoolInfo.accPenpiePerShare;\\n        penpiePool.totalStaked = penpiePoolInfo.totalStaked;\\n        penpiePool.rewarder = penpiePoolInfo.rewarder;\\n        penpiePool.isActive = penpiePoolInfo.isActive;\\n        penpiePool.receiptToken = penpiePoolInfo.receiptToken;\\n        (penpiePool.emission, penpiePool.allocpoint, penpiePool.sizeOfPool, penpiePool.totalPoint) = masterPenpie.getPoolInfo(penpiePool.stakingToken);\\n        if (penpiePool.stakingToken == vlPenpie) {\\n            penpiePool.poolType = \\\"VLPENPIE_POOL\\\";\\n            penpiePool.stakedTokenInfo = getERC20TokenInfo(penpiePool.stakingToken);\\n            penpiePool.vlPenpieLockInfo = getVlPenpieLockInfo(account);\\n        }\\n        else if (penpiePool.stakingToken == penpieOFT) {\\n            penpiePool.poolType = \\\"PENPIEOFT_POOL\\\";\\n            penpiePool.stakedTokenInfo = getERC20TokenInfo(penpiePool.stakingToken);\\n        }\\n        else if (penpiePool.stakingToken == mPendleOFT) {\\n            penpiePool.poolType = \\\"MPENDLE_POOL\\\";\\n            penpiePool.stakedTokenInfo = getERC20TokenInfo(penpiePool.stakingToken);\\n        }\\n        else if (penpiePool.stakingToken != penpiePool.receiptToken) {\\n            penpiePool.isPendleMarket = true;\\n        }\\n        if (penpiePool.isPendleMarket == true) {\\n            penpiePool.poolType = \\\"PENDLE_MARKET\\\";\\n            PendleMarket memory pendleMarket;\\n           // IPenpieReceiptTokenReader penpieReceiptTokenReader = IPenpieReceiptTokenReader(penpiePoolInfo.stakingToken);\\n            pendleMarket.marketAddress = penpiePoolInfo.stakingToken;\\n            IPendleMarketReader pendleMarketReader = IPendleMarketReader(pendleMarket.marketAddress);\\n            (address SY, address PT, address YT) = pendleMarketReader.readTokens();\\n            pendleMarket.SY = getERC20TokenInfo(SY);\\n            pendleMarket.PT = getERC20TokenInfo(PT);\\n            pendleMarket.YT = getERC20TokenInfo(YT);\\n            IPendleStakingReader.PendleStakingPoolInfo memory poolInfo = pendleStaking.pools(pendleMarket.marketAddress);\\n            PendleStakingPoolInfo memory pendleStakingPoolInfo;\\n            pendleStakingPoolInfo.helper = poolInfo.helper;\\n            pendleStakingPoolInfo.isActive = poolInfo.isActive;\\n            pendleStakingPoolInfo.market = poolInfo.market;\\n            pendleStakingPoolInfo.receiptToken = poolInfo.receiptToken;\\n            pendleStakingPoolInfo.rewarder = poolInfo.rewarder;\\n            pendleStakingPoolInfo.lastHarvestTime = poolInfo.lastHarvestTime;\\n            pendleStakingPoolInfo.activeBalance = pendleMarketReader.activeBalance(address(pendleStaking));\\n            pendleStakingPoolInfo.lpBalance = ERC20(pendleMarket.marketAddress).balanceOf(address(pendleStaking));\\n            penpiePool.pendleStakingPoolInfo = pendleStakingPoolInfo;\\n            penpiePool.pendleMarket = pendleMarket;\\n            penpiePool.stakedTokenInfo = getERC20TokenInfo(pendleMarket.marketAddress);\\n        }\\n    \\n\\n        if (account != address(0)) {\\n            penpiePool.accountInfo = getPenpieAccountInfo(penpiePool, account);\\n            penpiePool.rewardInfo = getPenpieRewardInfo(penpiePool.stakingToken, account);\\n        }\\n        return penpiePool;\\n    }\\n\\n    function getVlPenpieLockInfo(address account) public view returns (VlPenpieLockInfo memory) {\\n        VlPenpieLockInfo memory vlPenpieLockInfo;\\n        IVLPenpieReader vlPenpieReader = IVLPenpieReader(vlPenpie);\\n        vlPenpieLockInfo.totalPenalty = vlPenpieReader.totalPenalty();\\n        if (account != address(0)) {\\n            try vlPenpieReader.getNextAvailableUnlockSlot(account) returns (uint256 nextAvailableUnlockSlot) {\\n                vlPenpieLockInfo.isFull = false;\\n            }\\n            catch {\\n                vlPenpieLockInfo.isFull = true;\\n            }\\n            vlPenpieLockInfo.userAmountInCoolDown = vlPenpieReader.getUserAmountInCoolDown(account);\\n            vlPenpieLockInfo.userTotalLocked = vlPenpieReader.getUserTotalLocked(account);\\n            IVLPenpieReader.UserUnlocking[] memory userUnlockingList = vlPenpieReader.getUserUnlockingSchedule(account);\\n            VlPenpieUserUnlocking[] memory vlPenpieUserUnlockingList = new VlPenpieUserUnlocking[](userUnlockingList.length);\\n            for(uint256 i = 0; i < userUnlockingList.length; i++) {\\n                VlPenpieUserUnlocking memory vlPenpieUserUnlocking;\\n                IVLPenpieReader.UserUnlocking memory userUnlocking = userUnlockingList[i];\\n                vlPenpieUserUnlocking.startTime = userUnlocking.startTime;\\n                vlPenpieUserUnlocking.endTime = userUnlocking.endTime;\\n                vlPenpieUserUnlocking.amountInCoolDown = userUnlocking.amountInCoolDown;\\n                (uint256 penaltyAmount, uint256 amountToUser) = vlPenpieReader.expectedPenaltyAmountByAccount(account, i);\\n                vlPenpieUserUnlocking.expectedPenaltyAmount = penaltyAmount;\\n                vlPenpieUserUnlocking.amountToUser = amountToUser;\\n                vlPenpieUserUnlockingList[i] = vlPenpieUserUnlocking;\\n            }\\n            vlPenpieLockInfo.userUnlockingSchedule = vlPenpieUserUnlockingList;\\n        }\\n        return vlPenpieLockInfo;\\n    }\\n\\n\\n    function getPenpieAccountInfo(PenpiePool memory pool, address account) public view returns (PenpieAccountInfo memory) {\\n        PenpieAccountInfo memory accountInfo;\\n        if (pool.isPendleMarket) {\\n            accountInfo.balance = ERC20(pool.pendleMarket.marketAddress).balanceOf(account);\\n            accountInfo.stakingAllowance = ERC20(pool.pendleMarket.marketAddress).allowance(account, address(pendleStaking));\\n            accountInfo.stakedAmount = ERC20(pool.pendleStakingPoolInfo.receiptToken).balanceOf(account);\\n        }\\n        else {\\n            accountInfo.balance = ERC20(pool.stakingToken).balanceOf(account);\\n            accountInfo.stakingAllowance = ERC20(pool.stakingToken).allowance(account, address(masterPenpie));\\n            (accountInfo.stakedAmount, accountInfo.availableAmount) = masterPenpie.stakingInfo(pool.stakingToken, account);\\n        }\\n        if (pool.stakingToken == mPendleOFT) {\\n            accountInfo.mPendleConvertAllowance = ERC20(PENDLE).allowance(account, mPendleConvertor);\\n            accountInfo.pendleBalance = ERC20(PENDLE).balanceOf(account);\\n        }\\n        if  (pool.stakingToken == vlPenpie) {\\n            accountInfo.lockPenpieAllowance = ERC20(penpieOFT).allowance(account, vlPenpie);\\n            accountInfo.penpieBalance = ERC20(penpieOFT).balanceOf(account);\\n        }\\n        \\n        return accountInfo;\\n    }\\n\\n    function getPenpieRewardInfo(address stakingToken, address account) public view returns (PenpieRewardInfo memory) {\\n        PenpieRewardInfo memory rewardInfo;\\n        (rewardInfo.pendingPenpie, rewardInfo.bonusTokenAddresses, rewardInfo.bonusTokenSymbols, rewardInfo.pendingBonusRewards) = masterPenpie.allPendingTokens(stakingToken, account);\\n        return rewardInfo;\\n    }\\n\\n\\n    function getBribeInfo(address account)  external view returns (BribeInfo memory) {\\n        BribeInfo memory info;\\n        info.currentEpochEndTime = penpieBribeManager.getCurrentEpochEndTime();\\n        info.lastCastTime = penpieVoteManager.lastCastTime();\\n        info.totalVlPenpieInVote = penpieVoteManager.totalVlPenpieInVote();\\n        info.penpieVePendle = pendleStaking.accumulatedVePendle();\\n        info.totalVePendle = IPVeToken(pendleStaking.vePendle()).totalSupplyStored();\\n        address[] memory approvedTokensAddress = penpieBribeManager.getApprovedTokens();\\n        ApprovedToken[] memory approvedTokens = new ApprovedToken[](approvedTokensAddress.length);\\n        for(uint256 i = 0; i < approvedTokensAddress.length; i++) {\\n            ApprovedToken memory approvedToken;\\n            approvedToken.token = approvedTokensAddress[i];\\n            approvedToken.tokenInfo = getERC20TokenInfo(approvedTokensAddress[i]);\\n            if (account != address(0)) {\\n                approvedToken.balanceOf = ERC20(approvedToken.token).balanceOf(account);\\n                approvedToken.addBribeAllowance = ERC20(approvedToken.token).allowance(account, address(penpieBribeManager));\\n            }\\n            approvedTokens[i] = approvedToken;\\n        } \\n        info.approvedTokens = approvedTokens;\\n\\n        uint256 poolCount = penpieVoteManager.getPoolsLength();\\n        BribePool[] memory pools = new BribePool[](poolCount);\\n        address[] memory marketList =  new address[](poolCount);\\n        for (uint256 i = 0; i < poolCount; ++i) {\\n           pools[i] = getBribePoolInfo(i, account);\\n           marketList[i] = pools[i].market;\\n        }\\n        info.pools = pools;\\n        if (account != address(0)) {\\n            info.userVotable = penpieVoteManager.getUserVotable(account);\\n            info.userTotalVotedInVlPenpie = penpieVoteManager.userTotalVotedInVlPenpie(account);\\n            uint256[] memory userVoted = penpieVoteManager.getUserVoteForPoolsInVlPenpie(marketList, account);\\n            for (uint256 i = 0; i < poolCount; ++i) {\\n               pools[i].userVotedForPoolInVlPenpie = userVoted[i];\\n            }\\n        }\\n        uint256 exactCurrentEpoch = penpieBribeManager.exactCurrentEpoch();\\n        if (exactCurrentEpoch > 0) {\\n            uint256 previousEpoch = exactCurrentEpoch - 1;\\n            IPenpieBribeManagerReader.IBribe[][] memory bribes;\\n            if (previousEpoch >= 0) {\\n                bribes =  penpieBribeManager.getBribesInAllPools(previousEpoch);\\n                for (uint256 i = 0; i < poolCount; ++i) {\\n                    uint256 size = bribes[i].length;\\n                    Bribe[] memory poolBribe = new Bribe[](size);\\n                    for(uint256 m = 0; m < size; ++m) {\\n                        address token = bribes[i][m]._token;\\n                        uint256 amount = bribes[i][m]._amount;\\n                        Bribe memory temp;\\n                        temp.token = token;\\n                        temp.amount = amount;\\n                        temp.tokenInfo = getERC20TokenInfo(token);\\n                        poolBribe[m] = temp;\\n                    }\\n                    pools[i].previousBribes = poolBribe;\\n                }\\n            }\\n            bribes =  penpieBribeManager.getBribesInAllPools(exactCurrentEpoch);\\n            for (uint256 i = 0; i < poolCount; ++i) {\\n                uint256 size = bribes[i].length;\\n                Bribe[] memory poolBribe = new Bribe[](size);\\n                for(uint256 m = 0; m < size; ++m) {\\n                    address token = bribes[i][m]._token;\\n                    uint256 amount = bribes[i][m]._amount;\\n                    Bribe memory temp;\\n                    temp.token = token;\\n                    temp.amount = amount;\\n                    temp.tokenInfo = getERC20TokenInfo(token);\\n                    poolBribe[m] = temp;\\n                }\\n                pools[i].currentBribes = poolBribe;\\n            }\\n        }\\n    \\n\\n        return info;\\n    }\\n\\n    function getBribePoolInfo(uint256 poolId, address account) public view returns (BribePool memory) {\\n        BribePool memory bribePool;\\n        bribePool.poolId = poolId;\\n        (bribePool.market, bribePool.totalVoteInVlPenpie, bribePool.chainId, bribePool.isActive) = penpieVoteManager.poolInfos(poolId);\\n        // if (account != address(0)) {\\n        //     uint256[] memory userVoted = penpieVoteManager.getUserVoteForPoolsInVlPenpie([bribePool.market], account);\\n        //     bribePool.userVotedInVlPenpie = userVoted[0];\\n        // }\\n        \\n        return bribePool;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _addTokenRouteInteral(address tokenAddress, address [] memory paths, address[] memory pools) internal returns (TokenRouter memory tokenRouter) {\\n        if (tokenRouterMap[tokenAddress].token == address(0)) {\\n            tokenList.push(tokenAddress);\\n        }\\n        tokenRouter.token = tokenAddress;\\n        tokenRouter.symbol = ERC20(tokenAddress).symbol();\\n        tokenRouter.decimals = ERC20(tokenAddress).decimals();\\n        tokenRouter.paths = paths;\\n        tokenRouter.pools = pools;\\n    }\\n\\n\\n    /* ============ Admin Functions ============ */\\n\\n    function addTokenCamelotRouter(address tokenAddress, address [] memory paths, address[] memory pools) external onlyOwner  {\\n        TokenRouter memory tokenRouter = _addTokenRouteInteral(tokenAddress, paths, pools);\\n        tokenRouter.routerType = CamelotRouterType;\\n        tokenRouterMap[tokenAddress] = tokenRouter;\\n    }\\n\\n    function addUniswapV3Router(address tokenAddress, address [] memory paths, address[] memory pools) external onlyOwner  {\\n        TokenRouter memory tokenRouter = _addTokenRouteInteral(tokenAddress, paths, pools);\\n        tokenRouter.routerType = UniswapV3RouterType;\\n        tokenRouterMap[tokenAddress] = tokenRouter;\\n    }\\n\\n    function addTradeJoeV2Router(address tokenAddress, address [] memory paths, address[] memory pools) external onlyOwner  {\\n        TokenRouter memory tokenRouter = _addTokenRouteInteral(tokenAddress, paths, pools);\\n        tokenRouter.routerType = TraderJoeV2Type;\\n        tokenRouterMap[tokenAddress] = tokenRouter;\\n    }        \\n\\n    function addTokenChainlink(address tokenAddress, address [] memory paths, address[] memory pools, address priceAddress) external onlyOwner  {\\n        TokenRouter memory tokenRouter = _addTokenRouteInteral(tokenAddress, paths, pools);\\n        tokenRouter.routerType = ChainlinkType;\\n        tokenRouter.chainlink = priceAddress;\\n        tokenRouterMap[tokenAddress] = tokenRouter;\\n    }\\n\\n    // function setMasterPenpie(IMasterPenpieReader _masterPenpie)  external onlyOwner  {\\n    //     masterPenpie = _masterPenpie;\\n    //     vlPenpie = masterPenpie.vlPenpie();\\n    //     penpieOFT = masterPenpie.penpieOFT();\\n    // }\\n\\n    // function setPendleStaking(IPendleStakingReader _pendleStaking)  external onlyOwner  {\\n    //     pendleStaking = _pendleStaking;\\n    //     mPendleOFT = pendleStaking.mPendleOFT();\\n    //     PENDLE = pendleStaking.PENDLE();\\n    //     WETHToken = pendleStaking.WETH();\\n    //     mPendleConvertor = pendleStaking.mPendleConvertor();\\n    //     autoBribeFee = pendleStaking.autoBribeFee();\\n    // }\\n\\n    function setPenpieBribeManager(IPenpieBribeManagerReader _penpieBribeManager) external onlyOwner  {\\n        penpieBribeManager = _penpieBribeManager;\\n        penpieVoteManager =  IPendleVoteManagerReader(_penpieBribeManager.voteManager());\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CamelotRouter\",\"outputs\":[{\"internalType\":\"contract ICamelotRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENDLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Penpie\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TraderJoeV2LBQuoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PenpieReader_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"addTokenCamelotRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"priceAddress\",\"type\":\"address\"}],\"name\":\"addTokenChainlink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"addTradeJoeV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"addUniswapV3Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBribeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.TokenPrice[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBribeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentEpochEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTotalVotedInVlPenpie\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVlPenpieInVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userVotable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penpieVePendle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVePendle\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addBribeAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ApprovedToken[]\",\"name\":\"approvedTokens\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoteInVlPenpie\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userVotedForPoolInVlPenpie\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.Bribe[]\",\"name\":\"previousBribes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.Bribe[]\",\"name\":\"currentBribes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PenpieReader.BribePool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PenpieReader.BribeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBribePoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoteInVlPenpie\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userVotedForPoolInVlPenpie\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.Bribe[]\",\"name\":\"previousBribes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.Bribe[]\",\"name\":\"currentBribes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PenpieReader.BribePool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getERC20TokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPenpiePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeOfPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPendleMarket\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"poolType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"stakedTokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"SY\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"PT\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"YT\",\"type\":\"tuple\"}],\"internalType\":\"struct PenpieReader.PendleMarket\",\"name\":\"pendleMarket\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"activeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.PendleStakingPoolInfo\",\"name\":\"pendleStakingPoolInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mPendleConvertAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPenpieAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendleBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penpieBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.PenpieAccountInfo\",\"name\":\"accountInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pendingPenpie\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"bonusTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"bonusTokenSymbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pendingBonusRewards\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PenpieReader.PenpieRewardInfo\",\"name\":\"rewardInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userTotalLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAmountInCoolDown\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInCoolDown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedPenaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToUser\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.VlPenpieUserUnlocking[]\",\"name\":\"userUnlockingSchedule\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextAvailableUnlockSlot\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFull\",\"type\":\"bool\"}],\"internalType\":\"struct PenpieReader.VlPenpieLockInfo\",\"name\":\"vlPenpieLockInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct PenpieReader.PenpiePool\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPenpieAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mPendleConvertAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPenpieAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendleBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penpieBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.PenpieAccountInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPenpieInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"masterPenpie\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendleStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vlPenpie\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"penpieOFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mPendleOFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"PENDLE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mPendleConvertor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoBribeFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPenpiePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeOfPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPendleMarket\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"poolType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"stakedTokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"SY\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"PT\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"YT\",\"type\":\"tuple\"}],\"internalType\":\"struct PenpieReader.PendleMarket\",\"name\":\"pendleMarket\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"activeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.PendleStakingPoolInfo\",\"name\":\"pendleStakingPoolInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mPendleConvertAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPenpieAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendleBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penpieBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.PenpieAccountInfo\",\"name\":\"accountInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pendingPenpie\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"bonusTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"bonusTokenSymbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pendingBonusRewards\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PenpieReader.PenpieRewardInfo\",\"name\":\"rewardInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userTotalLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAmountInCoolDown\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInCoolDown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedPenaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToUser\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.VlPenpieUserUnlocking[]\",\"name\":\"userUnlockingSchedule\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextAvailableUnlockSlot\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFull\",\"type\":\"bool\"}],\"internalType\":\"struct PenpieReader.VlPenpieLockInfo\",\"name\":\"vlPenpieLockInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct PenpieReader.PenpiePool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PenpieReader.PenpieInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPenpiePoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPenpiePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeOfPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPendleMarket\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"poolType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"stakedTokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"SY\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"PT\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.ERC20TokenInfo\",\"name\":\"YT\",\"type\":\"tuple\"}],\"internalType\":\"struct PenpieReader.PendleMarket\",\"name\":\"pendleMarket\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"activeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.PendleStakingPoolInfo\",\"name\":\"pendleStakingPoolInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mPendleConvertAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPenpieAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendleBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penpieBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.PenpieAccountInfo\",\"name\":\"accountInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pendingPenpie\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"bonusTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"bonusTokenSymbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pendingBonusRewards\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PenpieReader.PenpieRewardInfo\",\"name\":\"rewardInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userTotalLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAmountInCoolDown\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInCoolDown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedPenaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToUser\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.VlPenpieUserUnlocking[]\",\"name\":\"userUnlockingSchedule\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextAvailableUnlockSlot\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFull\",\"type\":\"bool\"}],\"internalType\":\"struct PenpieReader.VlPenpieLockInfo\",\"name\":\"vlPenpieLockInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct PenpieReader.PenpiePool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPenpieRewardInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pendingPenpie\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"bonusTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"bonusTokenSymbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pendingBonusRewards\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PenpieReader.PenpieRewardInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unitToken\",\"type\":\"address\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVlPenpieLockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userTotalLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAmountInCoolDown\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInCoolDown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedPenaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToUser\",\"type\":\"uint256\"}],\"internalType\":\"struct PenpieReader.VlPenpieUserUnlocking[]\",\"name\":\"userUnlockingSchedule\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextAvailableUnlockSlot\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFull\",\"type\":\"bool\"}],\"internalType\":\"struct PenpieReader.VlPenpieLockInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mPendleConvertor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mPendleOFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterPenpie\",\"outputs\":[{\"internalType\":\"contract IMasterPenpieReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendleStaking\",\"outputs\":[{\"internalType\":\"contract IPendleStakingReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penpieBribeManager\",\"outputs\":[{\"internalType\":\"contract IPenpieBribeManagerReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penpieOFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penpieVoteManager\",\"outputs\":[{\"internalType\":\"contract IPendleVoteManagerReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPenpieBribeManagerReader\",\"name\":\"_penpieBribeManager\",\"type\":\"address\"}],\"name\":\"setPenpieBribeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRouterMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chainlink\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"routerType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vlPenpie\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PenpieReader", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}