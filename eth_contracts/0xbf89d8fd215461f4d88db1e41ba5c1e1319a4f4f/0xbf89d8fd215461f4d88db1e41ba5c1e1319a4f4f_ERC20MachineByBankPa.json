{"SourceCode": "// Sources flattened with hardhat v2.19.1 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        _spendAllowance(account, _msgSender(), amount);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBase.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IBase {\r\n    /// - antiBotParam\r\n    /// 1. holdLimit\r\n    /// 2. txLimit\r\n    /// 3. antiDumpLimit\r\n    /// 4. antiSniperOn\r\n    ///\r\n    /// - taxParam\r\n    /// 1. dexRouter: uniswap or sushiswap\r\n    /// 2. pairedToken: eth or usdc\r\n    /// 3. taxPayAccount\r\n    /// 4. treasuryAccount\r\n    /// 5. buyTax\r\n    /// 6. sellTax\r\n    /// 7. treasuryTax\r\n    ///\r\n    /// - distribParam\r\n    /// 1. totalSupply\r\n    /// 2. teamAccount\r\n    /// 3. teamAllocPercent\r\n    ///\r\n    /// - lpParam\r\n    /// 1. isLPBurn\r\n    /// 2. isTradingDelayed\r\n    /// 3. isTradingDisabled\r\n    /// 4. pairedTokenAmount\r\n    /// 5. lockPeriod\r\n    struct TokenLaunchConf {\r\n        string uuid;\r\n        string name;\r\n        string symbol;\r\n        bytes distribParam;\r\n        bytes antiBotParam;\r\n        bytes taxParam;\r\n        bytes lpParam;\r\n    }\r\n\r\n    // Configuration inherited from the factory contract\r\n    struct InheritedConf {\r\n        uint16 autoBurnFirstPercent;\r\n        uint16 autoBurnSecondPercent;\r\n        uint16 autoBurnThirdPercent;\r\n        uint16 maxBuyTaxAfter;\r\n        uint16 maxSellTaxAfter;\r\n        uint16 maxTreasuryTaxAfter;\r\n        uint16 bankPadTax;\r\n        uint16 maxTaxToRenounce;\r\n        uint32 bankPadTaxApplyPeriod;\r\n        uint32 taxWhitelistApplyDelay;\r\n        uint32 tradingDelayTime;\r\n        uint32 tradingDisableTime;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20FactoryByBankPad.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20FactoryByBankPad {\r\n    /**\r\n     * @notice function {servicePayAccount}\r\n     *\r\n     * Return BankPad service pay account\r\n     *\r\n     * @return address service pay account\r\n     */\r\n    function servicePayAccount() external view returns (address payable);\r\n\r\n    /**\r\n     * @dev function {maxTeamAllocForUUID}\r\n     *\r\n     * Return max team distribution percentage for the given `uuid` of token\r\n     * whitelisted token will return its max allocation percent\r\n     * return `_maxTeamAlloc` for others\r\n     *\r\n     * @param uuid token UUID\r\n     */\r\n    function maxTeamAllocForUUID(\r\n        string calldata uuid\r\n    ) external view returns (uint16);\r\n}\r\n\r\n\r\n// File contracts/token/AntiBotHelper.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @notice Anti-Bot Helper\r\n * Max TX Amount feature\r\n * Max Wallet Amount feature\r\n * Sniper auto-burn feature\r\n */\r\nabstract contract AntiBotHelper is Ownable {\r\n    /// @dev Minimum value that can be set for the max transaction limit - 0.25%\r\n    uint16 private constant MIN__MAX_TX_LIMIT = 25;\r\n    /// @dev Maximum value that can be set for the max transaction limit - 100%\r\n    uint16 private constant MAX__MAX_TX_LIMIT = 10000;\r\n    /// @dev Minimum value that can be set for the max hold limit - 0.25%\r\n    uint16 private constant MIN__MAX_HOLD_LIMIT = 25;\r\n    /// @dev Maximum value that can be set for the max hold limit - 100%\r\n    uint16 private constant MAX__MAX_HOLD_LIMIT = 10000;\r\n    /// @dev Minimum value that can be set for the anti-dump limit - 0.25%\r\n    uint16 internal constant MIN_ANTI_DUMP_LIMIT = 25;\r\n    /// @dev Maximum value that can be set for the anti-dump limit - 100%\r\n    uint16 private constant MAX_ANTI_DUMP_LIMIT = 10000;\r\n\r\n    /// @dev Anti-snipe tax is burned, reducing total supply\r\n    /// 1. 20% tax on buys in the first block\r\n    /// 2. Reducing to 13.33% in the second block\r\n    /// 3. Reducing to 6.66% in the third\r\n    /// 4. Finally 0% from the fourth block on\r\n    uint16 internal _autoBurnFirstPercent;\r\n    uint16 internal _autoBurnSecondPercent;\r\n    uint16 internal _autoBurnThirdPercent;\r\n\r\n    uint16 internal _maxTxLimit;\r\n    uint16 internal _maxHoldLimit;\r\n    uint16 internal _antiDumpLimit;\r\n\r\n    bool internal _isAntiSniperOn;\r\n    bool internal _isTradingDelayed;\r\n    bool internal _isTradingDisabled;\r\n\r\n    uint256 internal _firstBuyAt;\r\n    uint256 internal _secondBuyAt;\r\n    uint256 internal _thirdBuyAt;\r\n\r\n    mapping(address => bool) internal _isExcludedFromTxLimit;\r\n    mapping(address => bool) internal _isExcludedFromHoldLimit;\r\n\r\n    event AntiDumpLimitUpdated(uint16 antiDumpLimit);\r\n    event ExcludedFromHoldLimit(address account, bool flag);\r\n    event ExcludedFromTxLimit(address account, bool flag);\r\n    event MaxLimitUpdated(uint16 maxHoldLimit, uint16 maxTxLimit);\r\n    event TradingDelayFinished();\r\n    event TradingEnabled();\r\n\r\n    /// @dev Initialize anti bot configuration\r\n    /// abi encoded param\r\n    /// 1. txLimit\r\n    /// 2. holdLimit\r\n    /// 3. antiSniperOn\r\n    function _initializeAntiBot(bytes memory param) internal {\r\n        (\r\n            uint16 holdLimit,\r\n            uint16 txLimit,\r\n            uint16 antiDumpLimit_,\r\n            bool antiSniperOn\r\n        ) = abi.decode(param, (uint16, uint16, uint16, bool));\r\n\r\n        require(\r\n            txLimit <= MAX__MAX_TX_LIMIT && txLimit >= MIN__MAX_TX_LIMIT,\r\n            \"tx limit out of range\"\r\n        );\r\n        require(\r\n            holdLimit <= MAX__MAX_HOLD_LIMIT &&\r\n                holdLimit >= MIN__MAX_HOLD_LIMIT,\r\n            \"hold limit out of range\"\r\n        );\r\n        require(txLimit <= holdLimit, \"tx limit exceeds hold limit\");\r\n        require(\r\n            antiDumpLimit_ == 0 ||\r\n                (antiDumpLimit_ >= MIN_ANTI_DUMP_LIMIT &&\r\n                    antiDumpLimit_ <= MAX_ANTI_DUMP_LIMIT),\r\n            \"anti-dump limit out of range\"\r\n        );\r\n\r\n        _maxTxLimit = txLimit;\r\n        _maxHoldLimit = holdLimit;\r\n        _antiDumpLimit = antiDumpLimit_;\r\n        _isAntiSniperOn = antiSniperOn;\r\n    }\r\n\r\n    /// @dev Return anti-sniper auto-burn percent\r\n    function _antiSniperAutoBurn() internal returns (uint16) {\r\n        if (!_isAntiSniperOn) {\r\n            if (_firstBuyAt == 0) _firstBuyAt = block.timestamp;\r\n            return 0;\r\n        }\r\n        uint256 blockTime = block.timestamp;\r\n\r\n        if (blockTime == _thirdBuyAt) return _autoBurnThirdPercent;\r\n        if (blockTime == _secondBuyAt) return _autoBurnSecondPercent;\r\n        if (blockTime == _firstBuyAt) return _autoBurnFirstPercent;\r\n        if (_thirdBuyAt > 0) return 0;\r\n        if (_secondBuyAt > 0) {\r\n            _thirdBuyAt = block.timestamp;\r\n            return _autoBurnThirdPercent;\r\n        }\r\n        if (_firstBuyAt > 0) {\r\n            _secondBuyAt = block.timestamp;\r\n            return _autoBurnSecondPercent;\r\n        }\r\n        _firstBuyAt = block.timestamp;\r\n        return _autoBurnFirstPercent;\r\n    }\r\n\r\n    /// @notice Exclude / Include the multiple accounts from max tx limit\r\n    /// @dev Only callable by owner\r\n    function batchExcludeFromTxLimit(\r\n        address[] calldata accounts,\r\n        bool flag\r\n    ) external onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i; i < len; ) {\r\n            address account = accounts[i];\r\n            _isExcludedFromTxLimit[account] = flag;\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n\r\n            emit ExcludedFromTxLimit(account, flag);\r\n        }\r\n    }\r\n\r\n    /// @notice Exclude / Include the multiple accounts from max wallet limit\r\n    /// @dev Only callable by owner\r\n    function batchExcludeFromHoldLimit(\r\n        address[] calldata accounts,\r\n        bool flag\r\n    ) external onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i; i < len; ) {\r\n            address account = accounts[i];\r\n            _isExcludedFromHoldLimit[account] = flag;\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n\r\n            emit ExcludedFromHoldLimit(account, flag);\r\n        }\r\n    }\r\n\r\n    /// @notice Check if the account is excluded from max hold & wallet limit\r\n    /// @return bool excluded from max hold limit\r\n    /// @return bool excluded from max tx limit\r\n    function isExcludedFromLimit(\r\n        address account\r\n    ) external view returns (bool, bool) {\r\n        return (\r\n            _isExcludedFromHoldLimit[account],\r\n            _isExcludedFromTxLimit[account]\r\n        );\r\n    }\r\n\r\n    /// @notice Update anti-dump limit\r\n    /// @param limit new anti-dump limit\r\n    function updateAntiDumpLimit(uint16 limit) external onlyOwner {\r\n        require(_antiDumpLimit != 0, \"anti-dump not enabled\");\r\n\r\n        require(\r\n            limit >= MIN_ANTI_DUMP_LIMIT && limit <= MAX_ANTI_DUMP_LIMIT,\r\n            \"anti-dump limit out of range\"\r\n        );\r\n\r\n        _antiDumpLimit = limit;\r\n\r\n        emit AntiDumpLimitUpdated(limit);\r\n    }\r\n\r\n    /// @notice View anti-dump limit\r\n    /// @return uint16 anti-dump limit percent\r\n    function antiDumpLimit() external view returns (uint16) {\r\n        return _antiDumpLimit;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the anti-dump feature is enabled in the token\r\n     */\r\n    function isAntiDumpEnabled() external view returns (bool) {\r\n        return _antiDumpLimit >= MIN_ANTI_DUMP_LIMIT;\r\n    }\r\n\r\n    /// @notice Update max hold limit & max tx limit\r\n    /// @param holdLimit new max hold limit\r\n    /// @param txLimit new max tx limit\r\n    function updateMaxLimit(\r\n        uint16 holdLimit,\r\n        uint16 txLimit\r\n    ) external onlyOwner {\r\n        require(holdLimit >= txLimit, \"tx limit exceeds hold limit\");\r\n        require(\r\n            _maxHoldLimit <= holdLimit && _maxTxLimit <= txLimit,\r\n            \"increase only\"\r\n        );\r\n        require(txLimit <= MAX__MAX_TX_LIMIT, \"tx limit out of range\");\r\n        require(holdLimit <= MAX__MAX_HOLD_LIMIT, \"hold limit out of range\");\r\n\r\n        _maxHoldLimit = holdLimit;\r\n        _maxTxLimit = txLimit;\r\n\r\n        emit MaxLimitUpdated(holdLimit, txLimit);\r\n    }\r\n\r\n    /// @notice View max hold limit & max tx limit\r\n    /// @return uint16 max hold limit percent\r\n    /// @return uint16 max tx limit percent\r\n    function maxLimit() external view returns (uint16, uint16) {\r\n        return (_maxHoldLimit, _maxTxLimit);\r\n    }\r\n\r\n    /// @notice Enable trading\r\n    function enableTrading() external onlyOwner {\r\n        require(_isTradingDisabled, \"already enabled\");\r\n        _isTradingDisabled = false;\r\n\r\n        emit TradingEnabled();\r\n    }\r\n\r\n    /// @notice View anti-bot mechanism flags\r\n    /// @return bool {_isAntiSniperOn}\r\n    /// @return bool {_isTradingDelayed}\r\n    /// @return bool {_isTradingDisabled}\r\n    function antiBotFlags() external view returns (bool, bool, bool) {\r\n        return (_isAntiSniperOn, _isTradingDelayed, _isTradingDisabled);\r\n    }\r\n\r\n    /**\r\n     * @dev function {snipeAutoBurnPercents}\r\n     *\r\n     * Return anti-snipe auto burn percent values for 3 steps\r\n     *\r\n     * @return uint16 first auto burn percent\r\n     * @return uint16 second auto burn percent\r\n     * @return uint16 third auto burn percent\r\n     */\r\n    function snipeAutoBurnPercents()\r\n        external\r\n        view\r\n        returns (uint16, uint16, uint16)\r\n    {\r\n        return (\r\n            _autoBurnFirstPercent,\r\n            _autoBurnSecondPercent,\r\n            _autoBurnThirdPercent\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IDexRouter.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IDexFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n}\r\n\r\n\r\n// File contracts/token/TaxHelper.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @notice Tax Helper\r\n * Marketing fee\r\n * Burn fee\r\n * Fee in buy/sell/transfer separately\r\n */\r\nabstract contract TaxHelper is Ownable {\r\n    using Address for address payable;\r\n    address internal constant ETH_ADDRESS =\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    bool internal _bankpadFeeApplied = true;\r\n    uint16 internal _buyTax;\r\n    uint16 internal _sellTax;\r\n    uint16 internal _treasuryTax;\r\n\r\n    /// @dev Max buy tax after token launched\r\n    uint16 internal _maxBuyTaxAfter;\r\n    /// @dev Max sell tax after token launched\r\n    uint16 internal _maxSellTaxAfter;\r\n    /// @dev Max treasury tax after token launched\r\n    uint16 internal _maxTreasuryTaxAfter;\r\n\r\n    /// @dev Bankpad tax is set on top buy / sell / treasury tax as a service fee\r\n    uint16 internal _bankPadTax;\r\n\r\n    address internal _dexRouter;\r\n    address internal _taxPayAccount;\r\n    address internal _treasuryAccount;\r\n    address internal _baseAmmPair;\r\n    address internal _basePairedToken;\r\n\r\n    mapping(address => bool) internal _isExcludedFromTax;\r\n    mapping(address => bool) internal _isAmmPair;\r\n\r\n    event ExcludedFromTax(address account, bool flag);\r\n    event NewAmmPair(address pair, bool flag);\r\n    event TaxesUpdated(uint16 buyTax, uint16 sellTax, uint16 treasuryTax);\r\n\r\n    /// @dev Initialize tax configuration\r\n    /// abi encoded param\r\n    /// 1. dexRouter: uniswap or sushiswap\r\n    /// 2. pairedToken: eth or usdc\r\n    /// 3. taxPayAccount\r\n    /// 4. buyTax\r\n    /// 5. sellTax\r\n    function _initializeTax(bytes memory param) internal {\r\n        (\r\n            address dexRouter,\r\n            address pairedToken,\r\n            address taxPayAccount,\r\n            address treasuryAccount,\r\n            uint16 buyTax,\r\n            uint16 sellTax,\r\n            uint16 treasuryTax\r\n        ) = abi.decode(\r\n                param,\r\n                (address, address, address, address, uint16, uint16, uint16)\r\n            );\r\n\r\n        // tax pay account and treasury account are only available when buy/sell tax, treasury tax is greater then 0\r\n        if (buyTax > 0 || sellTax > 0)\r\n            require(taxPayAccount != address(0), \"invalid tax pay account\");\r\n        if (treasuryTax > 0)\r\n            require(treasuryAccount != address(0), \"invalid treasury account\");\r\n\r\n        // check if tax pay account and treasury account can receive ETH when the base pair token is ETH\r\n        if (pairedToken == ETH_ADDRESS) {\r\n            payable(taxPayAccount).sendValue(0);\r\n            payable(treasuryAccount).sendValue(0);\r\n        }\r\n\r\n        _dexRouter = dexRouter;\r\n        // pair with ETH or any other stable coin\r\n        address lpPair = IDexFactory(IDexRouter(dexRouter).factory())\r\n            .createPair(\r\n                address(this),\r\n                pairedToken == ETH_ADDRESS\r\n                    ? IDexRouter(dexRouter).WETH()\r\n                    : pairedToken\r\n            );\r\n\r\n        _baseAmmPair = lpPair;\r\n        _basePairedToken = pairedToken;\r\n        _taxPayAccount = taxPayAccount;\r\n        _treasuryAccount = treasuryAccount;\r\n\r\n        _buyTax = buyTax;\r\n        _sellTax = sellTax;\r\n        _treasuryTax = treasuryTax;\r\n\r\n        _isAmmPair[lpPair] = true;\r\n    }\r\n\r\n    /// @notice Update buy / sell / treasury tax\r\n    /// @dev new tax values should not be greater than the `taxAfterLimit`\r\n    /// @param buyTax new buy tax value\r\n    /// @param sellTax new sell tax value\r\n    /// @param treasuryTax new treasury tax value\r\n    function updateTaxes(\r\n        uint16 buyTax,\r\n        uint16 sellTax,\r\n        uint16 treasuryTax\r\n    ) external onlyOwner {\r\n        // gas-saving code\r\n        uint16 buyTax_ = _buyTax;\r\n        uint16 sellTax_ = _sellTax;\r\n        uint16 treasuryTax_ = _treasuryTax;\r\n\r\n        if (buyTax > buyTax_)\r\n            require(buyTax <= _maxBuyTaxAfter, \"invalid buyTax\");\r\n        if (sellTax > sellTax_)\r\n            require(sellTax <= _maxSellTaxAfter, \"invalid sellTax\");\r\n        if (treasuryTax > treasuryTax_)\r\n            require(treasuryTax <= _maxTreasuryTaxAfter, \"invalid treasuryTax\");\r\n\r\n        _buyTax = buyTax;\r\n        _sellTax = sellTax;\r\n        _treasuryTax = treasuryTax;\r\n\r\n        emit TaxesUpdated(buyTax, sellTax, treasuryTax);\r\n    }\r\n\r\n    /// @notice View taxes applied to the token\r\n    /// @return uint16 {_buyTax}\r\n    /// @return uint16 {_sellTax}\r\n    /// @return uint16 {_treasuryTax}\r\n    function taxes() external view returns (uint16, uint16, uint16) {\r\n        return (_buyTax, _sellTax, _treasuryTax);\r\n    }\r\n\r\n    /// @notice Exclude / Include the multiple accounts from tax\r\n    /// @dev Only callable by owner\r\n    function batchExcludeFromTax(\r\n        address[] calldata accounts,\r\n        bool flag\r\n    ) external onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i; i < len; ) {\r\n            address account = accounts[i];\r\n            _isExcludedFromTax[account] = flag;\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n\r\n            emit ExcludedFromTax(account, flag);\r\n        }\r\n    }\r\n\r\n    /// @notice Check if the account is excluded from the fees\r\n    /// @param account: the account to be checked\r\n    function isExcludedFromTax(address account) external view returns (bool) {\r\n        return _isExcludedFromTax[account];\r\n    }\r\n\r\n    /// @notice Check if the {pair} is AMM pair\r\n    function isAmmPair(address pair) external view returns (bool) {\r\n        return _isAmmPair[pair];\r\n    }\r\n\r\n    /// @notice View tax receive accounts\r\n    /// @return address buy/sell tax pay account\r\n    /// @return address treasury tax pay account\r\n    function taxAccounts() external view returns (address, address) {\r\n        return (_taxPayAccount, _treasuryAccount);\r\n    }\r\n\r\n    /// @notice View amm related configuration addresses\r\n    /// @return address dex router address\r\n    /// @return address base paired token address\r\n    /// @return address base pair address from the dex router\r\n    function ammAddresses() external view returns (address, address, address) {\r\n        return (_dexRouter, _basePairedToken, _baseAmmPair);\r\n    }\r\n\r\n    /**\r\n     * @dev function {taxLimits}\r\n     *\r\n     * Return tax limits compared with current value and taxAfterLimits\r\n     *\r\n     * @return uint16 max buy tax limit\r\n     * @return uint16 max sell tax limit\r\n     * @return uint16 max treasury tax limit\r\n     */\r\n    function taxLimits() external view returns (uint16, uint16, uint16) {\r\n        uint16 maxBuyTax = _buyTax < _maxBuyTaxAfter\r\n            ? _maxBuyTaxAfter\r\n            : _buyTax;\r\n        uint16 maxSellTax = _sellTax < _maxSellTaxAfter\r\n            ? _maxSellTaxAfter\r\n            : _sellTax;\r\n        uint16 maxTreasuryTax = _treasuryTax < _maxTreasuryTaxAfter\r\n            ? _maxTreasuryTaxAfter\r\n            : _treasuryTax;\r\n        return (maxBuyTax, maxSellTax, maxTreasuryTax);\r\n    }\r\n\r\n    /**\r\n     * @dev function {taxLimits}\r\n     *\r\n     * Return tax limits which are used after token launched\r\n     *\r\n     * @return uint16 max buy tax limit\r\n     * @return uint16 max sell tax limit\r\n     * @return uint16 max treasury tax limit\r\n     */\r\n    function taxAfterLimits() external view returns (uint16, uint16, uint16) {\r\n        return (_maxBuyTaxAfter, _maxSellTaxAfter, _maxTreasuryTaxAfter);\r\n    }\r\n\r\n    function bankPadTax() external view returns (uint16) {\r\n        return _bankPadTax;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/ERC20ByBankPadBase.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20ByBankPadBase is AntiBotHelper, TaxHelper, IBase, ERC20Burnable {\r\n    uint16 internal constant DENOMINATOR = 10000;\r\n    // default threshold would be 0.1% of the total supply\r\n    uint16 private constant DEFAULT_THRESHOLD = 10;\r\n\r\n    string public bankUUID;\r\n    address public immutable teamAccount;\r\n\r\n    address public immutable bankPadFactory;\r\n    bool internal _isLaunched;\r\n    bool internal _isTaxConvertEnabled = true;\r\n\r\n    /// @dev Ownership can be renounced only when buy/sell/treasury tax is below limit default 5%\r\n    uint16 private _maxTaxToRenounce;\r\n\r\n    /// @dev Bankpad tax is removed after some days default 15 days\r\n    uint32 internal _bankPadTaxApplyPeriod;\r\n    /// @dev Tax whitelist (exclude list) is not applied within some days after token launches default 2 days\r\n    uint32 internal _taxWhitelistApplyDelay;\r\n\r\n    /// @dev Token transfer is disabled for 1 mins once trading_delay flag is set\r\n    uint32 internal _tradingDelayTime = 1 minutes;\r\n    /// @dev Trading is disabled once {_isTradingDisabled} flag is set,\r\n    /// it is unset automatically after 7 days if owner does not enable trading\r\n    uint32 internal _tradingDisableTime = 7 days;\r\n\r\n    /// @dev Threshold amount of accumlated tax until swap to pair token\r\n    uint256 internal _thresholdAmount;\r\n\r\n    /// @dev Token launched time\r\n    uint256 internal _launchedAt;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyFactory() {\r\n        require(bankPadFactory == _msgSender(), \"caller is not the factory\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address factory_,\r\n        address deployer_,\r\n        TokenLaunchConf memory tokenLaunchConf_,\r\n        InheritedConf memory inheritedConf_\r\n    ) ERC20(tokenLaunchConf_.name, tokenLaunchConf_.symbol) {\r\n        bankUUID = tokenLaunchConf_.uuid;\r\n        bankPadFactory = factory_;\r\n\r\n        _transferOwnership(deployer_);\r\n\r\n        _initializeAntiBot(tokenLaunchConf_.antiBotParam);\r\n        _initializeTax(tokenLaunchConf_.taxParam);\r\n        _copyInheritedConf(inheritedConf_);\r\n\r\n        _isExcludedFromHoldLimit[_baseAmmPair] = true;\r\n\r\n        (uint256 supply, address teamAccount_, uint16 teamAlloc) = abi.decode(\r\n            tokenLaunchConf_.distribParam,\r\n            (uint256, address, uint16)\r\n        );\r\n        teamAccount = teamAccount_;\r\n\r\n        // threshold amount is 0.1% of the total supply\r\n        _thresholdAmount = (supply * DEFAULT_THRESHOLD) / DENOMINATOR;\r\n\r\n        // Distribute to team\r\n        if (teamAlloc > 0) {\r\n            require(teamAccount_ != address(0), \"invalid team account\");\r\n            require(\r\n                teamAlloc <=\r\n                    IERC20FactoryByBankPad(factory_).maxTeamAllocForUUID(\r\n                        tokenLaunchConf_.uuid\r\n                    ),\r\n                \"too much team alloc\"\r\n            );\r\n            uint256 teamAllocAmount = (supply * teamAlloc) / DENOMINATOR;\r\n            _mint(teamAccount_, teamAllocAmount);\r\n            supply -= teamAllocAmount;\r\n        }\r\n\r\n        // Mint rest tokens to the factory contract to add liquidity\r\n        _mint(factory_, supply);\r\n    }\r\n\r\n    /**\r\n     * @notice function {preLaunch}\r\n     *\r\n     * Configure token contract with the factory configuration\r\n     *\r\n     * @param param configuration structure from the factory\r\n     */\r\n    function _copyInheritedConf(InheritedConf memory param) private {\r\n        _autoBurnFirstPercent = param.autoBurnFirstPercent;\r\n        _autoBurnSecondPercent = param.autoBurnSecondPercent;\r\n        _autoBurnThirdPercent = param.autoBurnThirdPercent;\r\n\r\n        _maxBuyTaxAfter = _buyTax < param.maxBuyTaxAfter ? _buyTax : param.maxBuyTaxAfter;\r\n        _maxSellTaxAfter = _sellTax < param.maxSellTaxAfter ? _sellTax : param.maxSellTaxAfter;\r\n        _maxTreasuryTaxAfter = _treasuryTax < param.maxTreasuryTaxAfter ? _treasuryTax : param.maxTreasuryTaxAfter;\r\n\r\n        _bankPadTax = param.bankPadTax;\r\n        _maxTaxToRenounce = param.maxTaxToRenounce;\r\n\r\n        _bankPadTaxApplyPeriod = param.bankPadTaxApplyPeriod;\r\n        _taxWhitelistApplyDelay = param.taxWhitelistApplyDelay;\r\n        _tradingDelayTime = param.tradingDelayTime;\r\n        _tradingDisableTime = param.tradingDisableTime;\r\n    }\r\n\r\n    /// @dev Check if the sell amount is not against the anti-dump feature\r\n    function _isValidSell(uint256 sellAmount) internal view {\r\n        uint256 totalSupply_ = totalSupply();\r\n        uint16 antiDumpLimit_ = _antiDumpLimit;\r\n        // when anti-dump feature is enabled, sell amount should be less than the anti-dump limit\r\n        require(\r\n            antiDumpLimit_ < MIN_ANTI_DUMP_LIMIT ||\r\n                (totalSupply_ * antiDumpLimit_) / DENOMINATOR >= sellAmount,\r\n            \"anti-dump\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice function {launch}\r\n     *\r\n     * Finalize the initialization of the token contract and launch!\r\n     *\r\n     * @param tradingDelayed Once this flag is set, trading is delayed for 1 min\r\n     * @param tradingDisabled Once this flag is set, trading is disabled until it is set or 4 days\r\n     */\r\n    function launch(\r\n        bool tradingDelayed,\r\n        bool tradingDisabled\r\n    ) external onlyFactory {\r\n        require(!_isLaunched, \"already launched\");\r\n        _isLaunched = true;\r\n        // trading delay flag and trading disable flag can not set at the same time\r\n        require(\r\n            !tradingDelayed || !tradingDisabled,\r\n            \"can not delayed and disabled\"\r\n        );\r\n\r\n        _isTradingDelayed = tradingDelayed;\r\n        _isTradingDisabled = tradingDisabled;\r\n        _launchedAt = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice function {batchSetAsAmmPair}\r\n     *\r\n     * Set / unset multiple pair addresses as AMM pair\r\n     * LP addresses should be excluded from hold limit\r\n     *\r\n     * @param pairs lp addresses\r\n     * @param flag true / false\r\n     */\r\n    function batchSetAsAmmPair(\r\n        address[] calldata pairs,\r\n        bool flag\r\n    ) external onlyOwner {\r\n        uint256 len = pairs.length;\r\n\r\n        for (uint256 i; i < len; ) {\r\n            address pair = pairs[i];\r\n            require(pair != _baseAmmPair, \"can not access base amm pair\");\r\n            _isAmmPair[pair] = flag;\r\n            _isExcludedFromHoldLimit[pair] = flag;\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n\r\n            emit NewAmmPair(pair, flag);\r\n        }\r\n    }\r\n\r\n    /// @notice Renounce ownership of the token contract\r\n    /// @dev Only available when buy/sell tax is less than 5%\r\n    function renounceOwnership() public override onlyOwner {\r\n        uint16 maxTaxToRenounce_ = _maxTaxToRenounce;\r\n        require(\r\n            _buyTax <= maxTaxToRenounce_ &&\r\n                _sellTax <= maxTaxToRenounce_ &&\r\n                _treasuryTax <= maxTaxToRenounce_,\r\n            \"lower taxes before renounce\"\r\n        );\r\n\r\n        super.renounceOwnership();\r\n    }\r\n\r\n    /// @notice Enable conversion of token tax\r\n    function enableTaxConvert(bool flag) external onlyOwner {\r\n        _isTaxConvertEnabled = flag;\r\n    }\r\n\r\n    function isTaxConvertEnabled() external view returns (bool) {\r\n        return _isTaxConvertEnabled;\r\n    }\r\n\r\n    /// @notice Update the threshold amount for the swapping to occur\r\n    /// @dev Too small value will cause sell tx happens in every tx\r\n    function updateThresholdAmount(uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"invalid threshold\");\r\n        _thresholdAmount = amount;\r\n    }\r\n\r\n    function thresholdAmount() external view returns (uint256) {\r\n        return _thresholdAmount;\r\n    }\r\n\r\n    function launchedAt() external view returns (uint256) {\r\n        return _launchedAt;\r\n    }\r\n\r\n    /**\r\n     * @dev function {maxTaxToRenounce}\r\n     *\r\n     * Return the tax condition for renouncing ownership of the token\r\n     *\r\n     * @return uint16 max tax values for renounce\r\n     */\r\n    function maxTaxToRenounce() external view returns (uint16) {\r\n        return _maxTaxToRenounce;\r\n    }\r\n\r\n    /**\r\n     * @dev function {tradingTimes}\r\n     *\r\n     * Return token related time configuration\r\n     *\r\n     * @return uint32 trading delay time\r\n     * @return uint32 trading disable time\r\n     * @return uint32 BankPad tax apply period\r\n     * @return uint32 Tax whitelist delay period\r\n     */\r\n    function timeConfiguration()\r\n        external\r\n        view\r\n        returns (uint32, uint32, uint32, uint32)\r\n    {\r\n        return (\r\n            _tradingDelayTime,\r\n            _tradingDisableTime,\r\n            _bankPadTaxApplyPeriod,\r\n            _taxWhitelistApplyDelay\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/ERC20ByBankPad.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\ncontract ERC20ByBankPad is ERC20ByBankPadBase {\r\n    bytes32 public constant bankUUIDHash =\r\n        0x4D45544144524F504D45544144524F504D45544144524F504D45544144524F50;\r\n\r\n    using Address for address payable;\r\n    using SafeERC20 for IERC20;\r\n\r\n    bool private _inSwap;\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    constructor(\r\n        address factory_,\r\n        address deployer_,\r\n        TokenLaunchConf memory tokenLaunchConf_,\r\n        InheritedConf memory inheritedConf_\r\n    )\r\n        ERC20ByBankPadBase(\r\n            factory_,\r\n            deployer_,\r\n            tokenLaunchConf_,\r\n            inheritedConf_\r\n        )\r\n    {\r\n        _isExcludedFromTxLimit[_msgSender()] = true;\r\n        _isExcludedFromTxLimit[address(0)] = true;\r\n        _isExcludedFromTxLimit[address(0xdead)] = true;\r\n        _isExcludedFromTxLimit[address(this)] = true;\r\n\r\n        _isExcludedFromHoldLimit[_msgSender()] = true;\r\n        _isExcludedFromHoldLimit[address(0)] = true;\r\n        _isExcludedFromHoldLimit[address(0xdead)] = true;\r\n        _isExcludedFromHoldLimit[address(this)] = true;\r\n\r\n        _isExcludedFromTax[_msgSender()] = true;\r\n        _isExcludedFromTax[address(0)] = true;\r\n        _isExcludedFromTax[address(0xdead)] = true;\r\n        _isExcludedFromTax[address(this)] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        if (!_isLaunched) {\r\n            super._afterTokenTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        _checkTradingDelayedOrDisabled(from, to);\r\n\r\n        uint256 totalSupply_ = totalSupply();\r\n\r\n        // Check max tx limit\r\n        require(\r\n            _isExcludedFromTxLimit[from] ||\r\n                _isExcludedFromTxLimit[to] ||\r\n                amount <= (totalSupply_ * _maxTxLimit) / DENOMINATOR,\r\n            \"tx amount limited\"\r\n        );\r\n\r\n        // Check max wallet amount limit\r\n        require(\r\n            _isExcludedFromHoldLimit[to] ||\r\n                balanceOf(to) <= (totalSupply_ * _maxHoldLimit) / DENOMINATOR,\r\n            \"receiver hold limited\"\r\n        );\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        // token transfer before token launches like mint / add liquidity will not charge taxes\r\n        if (!_isLaunched) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        uint256 blockTime = block.timestamp;\r\n\r\n        uint256 bankPadTaxApplyPeriod = _bankPadTaxApplyPeriod;\r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        // tax whitelist is only applied after 2 days of the first buy\r\n        bool isWhitelisted = (_isExcludedFromTax[from] ||\r\n            _isExcludedFromTax[to]) &&\r\n            _firstBuyAt > 0 &&\r\n            blockTime >= _firstBuyAt + _taxWhitelistApplyDelay;\r\n        bool isBuyTx = _isAmmPair[from];\r\n        bool isSellTx = _isAmmPair[to];\r\n\r\n        // swap accumlated tax into ETH or USDC\r\n        if (\r\n            !_inSwap &&\r\n            !isWhitelisted &&\r\n            !isBuyTx &&\r\n            _isTaxConvertEnabled &&\r\n            contractTokenBalance >= _thresholdAmount\r\n        ) {\r\n            // although the bankpad tax period is finished, there may still be accumulated taxes thus far.\r\n            // in this case, we will swap all those taxes into ETH / USDC.\r\n            bool isBankpadOverTime = _bankpadFeeApplied &&\r\n                _firstBuyAt > 0 &&\r\n                blockTime > _firstBuyAt + bankPadTaxApplyPeriod;\r\n            // when the bankpad fee period is over, swap all accumlated taxes\r\n            if (isBankpadOverTime) _swapToPairedToken(contractTokenBalance);\r\n            else _swapToPairedToken(_thresholdAmount);\r\n            if (isBankpadOverTime) _bankpadFeeApplied = false;\r\n        }\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        uint256 fees;\r\n        if (!isWhitelisted) {\r\n            if (isBuyTx) {\r\n                // bankpad tax is applied on top of buy tax for 15 days\r\n                // its 10% of buy tax\r\n                if (\r\n                    _bankpadFeeApplied &&\r\n                    (_firstBuyAt == 0 ||\r\n                        blockTime <= _firstBuyAt + bankPadTaxApplyPeriod)\r\n                )\r\n                    fees =\r\n                        (amount *\r\n                            (_buyTax + _treasuryTax) *\r\n                            (DENOMINATOR + _bankPadTax)) /\r\n                        DENOMINATOR /\r\n                        DENOMINATOR;\r\n                else fees = (amount * (_buyTax + _treasuryTax)) / DENOMINATOR;\r\n\r\n                // for the first buy txs, anti sniper auto-burn is applied\r\n                // this is applied for 3 blocks\r\n                uint256 autoBurnPerc = _antiSniperAutoBurn();\r\n\r\n                if (autoBurnPerc > 0) {\r\n                    uint256 autoBurnAmount = (amount * autoBurnPerc) /\r\n                        DENOMINATOR;\r\n                    _burn(from, autoBurnAmount);\r\n\r\n                    amount -= autoBurnAmount;\r\n                }\r\n            } else if (isSellTx) {\r\n                _isValidSell(amount);\r\n                // bankpad tax is applied on top of sell tax for 15 days\r\n                // its 10% of buy tax\r\n                if (\r\n                    _bankpadFeeApplied &&\r\n                    (_firstBuyAt == 0 ||\r\n                        blockTime <= _firstBuyAt + bankPadTaxApplyPeriod)\r\n                )\r\n                    fees =\r\n                        (amount *\r\n                            (_sellTax + _treasuryTax) *\r\n                            (DENOMINATOR + _bankPadTax)) /\r\n                        DENOMINATOR /\r\n                        DENOMINATOR;\r\n                else fees = (amount * (_sellTax + _treasuryTax)) / DENOMINATOR;\r\n            }\r\n\r\n            if (fees > 0) super._transfer(from, address(this), fees);\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function _checkTradingDelayedOrDisabled(address from, address to) private {\r\n        address teamAccount_ = teamAccount; // gas-saving code\r\n        address tokenOwner = owner(); // gas-saving code\r\n        // token owner or team account is not restricted by trading delay or trading manually enable trading feature\r\n        if (\r\n            teamAccount_ == from ||\r\n            teamAccount_ == to ||\r\n            tokenOwner == from ||\r\n            tokenOwner == to\r\n        ) return;\r\n\r\n        uint256 blockTime = block.timestamp;\r\n        // check if the trading delayed\r\n        if (_isTradingDelayed) {\r\n            if (blockTime < _launchedAt + _tradingDelayTime)\r\n                revert(\"trading delayed\");\r\n            _isTradingDelayed = false;\r\n            emit TradingDelayFinished();\r\n        }\r\n\r\n        // check if the trading disabled\r\n        if (_isTradingDisabled) {\r\n            if (blockTime < _launchedAt + _tradingDisableTime)\r\n                revert(\"trading disabled\");\r\n            // enable trading after 4 days\r\n            _isTradingDisabled = false;\r\n            emit TradingEnabled();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Swap token accumlated in this contract to the base paired token\r\n     * \r\n     * According to the paired token\r\n\r\n     * - when paired token is ETH, swapToETH function is called\r\n     * - when paired token is another token, swapToToken is called\r\n\r\n     */\r\n    function _swapToPairedToken(uint256 amount) private lockTheSwap {\r\n        address basePairedToken_ = _basePairedToken;\r\n        address payable servicePayAccount = IERC20FactoryByBankPad(\r\n            bankPadFactory\r\n        ).servicePayAccount();\r\n        address payable taxPayAccount = payable(_taxPayAccount);\r\n        address payable treasuryAccount = payable(_treasuryAccount);\r\n        if (basePairedToken_ == ETH_ADDRESS) {\r\n            uint256 swappedAmount = _swapToETH(amount);\r\n            if (swappedAmount > 0) {\r\n                // send bankpad fee\r\n                if (_bankpadFeeApplied) {\r\n                    uint256 bankpadFeeAmount = _calcBankpadFee(swappedAmount);\r\n                    servicePayAccount.sendValue(bankpadFeeAmount);\r\n                    swappedAmount -= bankpadFeeAmount;\r\n                }\r\n                // send treasury tax\r\n                if (_treasuryTax > 0 && treasuryAccount != address(0)) {\r\n                    uint256 treasuryFeeAmount = _calcTreasuryFee(swappedAmount);\r\n                    treasuryAccount.sendValue(treasuryFeeAmount);\r\n                    swappedAmount -= treasuryFeeAmount;\r\n                }\r\n                // send buy/sell tax\r\n                if (taxPayAccount != address(0))\r\n                    taxPayAccount.sendValue(swappedAmount);\r\n            }\r\n        } else {\r\n            uint256 swappedAmount = _swapToToken(basePairedToken_, amount);\r\n            if (swappedAmount > 0) {\r\n                // send bankpad fee\r\n                if (_bankpadFeeApplied) {\r\n                    uint256 bankpadFeeAmount = _calcBankpadFee(swappedAmount);\r\n                    IERC20(basePairedToken_).safeTransfer(\r\n                        servicePayAccount,\r\n                        bankpadFeeAmount\r\n                    );\r\n                    swappedAmount -= bankpadFeeAmount;\r\n                }\r\n                // send treasury tax\r\n                if (_treasuryTax > 0 && treasuryAccount != address(0)) {\r\n                    uint256 treasuryFeeAmount = _calcTreasuryFee(swappedAmount);\r\n                    IERC20(basePairedToken_).safeTransfer(\r\n                        treasuryAccount,\r\n                        treasuryFeeAmount\r\n                    );\r\n                    swappedAmount -= treasuryFeeAmount;\r\n                }\r\n\r\n                // send buy/sell tax\r\n                if (taxPayAccount != address(0))\r\n                    IERC20(basePairedToken_).safeTransfer(\r\n                        taxPayAccount,\r\n                        swappedAmount\r\n                    );\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Calculate bankpad fee amount from the swapped total tax amount\r\n    function _calcBankpadFee(\r\n        uint256 swappedAmount\r\n    ) private view returns (uint256) {\r\n        uint16 bankPadTax = _bankPadTax;\r\n        return (swappedAmount * bankPadTax) / (DENOMINATOR + bankPadTax);\r\n    }\r\n\r\n    /// @dev Calculate treasury fee amount from the swapped tax amount\r\n    function _calcTreasuryFee(\r\n        uint256 swappedAmount\r\n    ) private view returns (uint256) {\r\n        // gas-saving codes\r\n        uint16 buyTax_ = _buyTax;\r\n        uint16 sellTax_ = _sellTax;\r\n        uint16 treasuryTax_ = _treasuryTax;\r\n\r\n        return\r\n            (swappedAmount * 2 * treasuryTax_) /\r\n            (buyTax_ + sellTax_ + 2 * treasuryTax_);\r\n    }\r\n\r\n    function _swapToToken(\r\n        address token,\r\n        uint256 amount\r\n    ) private returns (uint256) {\r\n        // generate the uniswap pair path of token -> stable coin\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = token;\r\n\r\n        IDexRouter dexRouter_ = IDexRouter(_dexRouter);\r\n        _approve(address(this), address(dexRouter_), amount);\r\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\r\n        // make the swap\r\n        try\r\n            dexRouter_.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                amount,\r\n                0, // accept any amount of tokens\r\n                path,\r\n                address(this),\r\n                block.timestamp + 300\r\n            )\r\n        {\r\n            return IERC20(token).balanceOf(address(this)) - balanceBefore;\r\n        } catch (bytes memory /* lowLevelData */) {}\r\n        return 0;\r\n    }\r\n\r\n    function _swapToETH(uint256 amount) private returns (uint256) {\r\n        IDexRouter dexRouter_ = IDexRouter(_dexRouter);\r\n        // generate the uniswap pair path of token -> eth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter_.WETH();\r\n\r\n        _approve(address(this), address(dexRouter_), amount);\r\n        uint256 balanceBefore = address(this).balance;\r\n        // make the swap\r\n        try\r\n            dexRouter_.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                amount,\r\n                0, // accept any amount of ETH\r\n                path,\r\n                address(this),\r\n                block.timestamp + 300\r\n            )\r\n        {\r\n            return address(this).balance - balanceBefore;\r\n        } catch (bytes memory /* lowLevelData */) {}\r\n        return 0;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev It allows the admin to recover tokens sent to the contract\r\n     * @param token_: the address of the token to withdraw\r\n     * @param amount_: the number of tokens to withdraw\r\n     *\r\n     * This function is only callable by owner\r\n     */\r\n    function recoverToken(address token_, uint256 amount_) external onlyOwner {\r\n        require(token_ != address(this), \"Not allowed token\");\r\n        IERC20(token_).safeTransfer(_msgSender(), amount_);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/launchpad/ERC20MachineByBankPad.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\n\r\n/**\r\n * @dev BankPad ERC-20 contract deployer\r\n *\r\n *\r\n * Lightweight deployment module for use with template contracts\r\n */\r\ncontract ERC20MachineByBankPad is Context {\r\n    address public immutable factory;\r\n    uint256 public immutable bytesStartPosition;\r\n\r\n    /**\r\n     * @dev {constructor}\r\n     *\r\n     * @param factory_ Address of the factory\r\n     */\r\n    constructor(address factory_) {\r\n        factory = factory_;\r\n\r\n        (\r\n            bool validStartPosition,\r\n            uint256 startPosition\r\n        ) = getBytesStartPosition();\r\n\r\n        if (!validStartPosition) {\r\n            revert(\"deployment error\");\r\n        }\r\n        bytesStartPosition = startPosition;\r\n    }\r\n\r\n    /**\r\n     * @dev {onlyFactory}\r\n     *\r\n     * Throws if called by any account other than the factory.\r\n     */\r\n    modifier onlyFactory() {\r\n        if (factory != _msgSender()) {\r\n            revert(\"caller is not factory\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev function {deploy} Deploy a fresh instance\r\n     *\r\n     * @param bankIdHash The hash of this token deployment identifier\r\n     * @param salt Provided sale for create2\r\n     * @param args Constructor arguments\r\n     */\r\n    function deploy(\r\n        bytes32 bankIdHash,\r\n        bytes32 salt,\r\n        bytes memory args\r\n    ) external payable onlyFactory returns (address erc20ContractAddress) {\r\n        // First check the bankIdHash_ is valid:\r\n        if (_startsWithEmptyByte(bankIdHash)) revert(\"invalid hash\");\r\n\r\n        // 1) Get the deployment bytecode:\r\n        bytes memory deploymentBytecode = type(ERC20ByBankPad).creationCode;\r\n\r\n        uint256 startPositionInMemoryForAssembly = bytesStartPosition;\r\n\r\n        // 2) Modify the bytecode, replacing the default bankIdHash with the received value.\r\n        // This allows us to verify the contract code (with comments) for every token,\r\n        // rather than matching the deployed code (and comments) of previous tokens.\r\n        assembly {\r\n            // Define the start position\r\n            let start := add(\r\n                deploymentBytecode,\r\n                startPositionInMemoryForAssembly\r\n            )\r\n\r\n            // Copy the bytes32 value to the specified position\r\n            mstore(add(start, 0x20), bankIdHash)\r\n        }\r\n        // 3) Add the args to the bytecode:\r\n        bytes memory deploymentData = abi.encodePacked(\r\n            deploymentBytecode,\r\n            args\r\n        );\r\n\r\n        // 4) Deploy it:\r\n        assembly {\r\n            erc20ContractAddress := create2(\r\n                0,\r\n                add(deploymentData, 0x20),\r\n                mload(deploymentData),\r\n                salt\r\n            )\r\n            if iszero(extcodesize(erc20ContractAddress)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev function {_startsWithEmptyByte} Does the passed hash start with\r\n     * an empty byte?\r\n     *\r\n     * @param hash_ The bytes32 hash\r\n     * @return bool The hash does / doesn't start with an empty tybe\r\n     */\r\n    function _startsWithEmptyByte(bytes32 hash_) internal pure returns (bool) {\r\n        return bytes1(hash_) == 0x00;\r\n    }\r\n\r\n    /**\r\n     * @dev function {getBytesStartPosition} Get the replacement bytes start position\r\n     *\r\n     * @return found_ If the bytes have been found\r\n     * @return startPosition_ The start position of the bytes\r\n     */\r\n    function getBytesStartPosition()\r\n        public\r\n        pure\r\n        returns (bool found_, uint256 startPosition_)\r\n    {\r\n        bytes\r\n            memory bytesTarget = hex\"4D45544144524F504D45544144524F504D45544144524F504D45544144524F50\";\r\n        bytes memory deploymentCode = type(ERC20ByBankPad).creationCode;\r\n\r\n        // Iterate through the bytecode to find the search bytes.\r\n        // Start at a reasonable position: byte 5000\r\n        for (\r\n            uint256 i = 5000;\r\n            i < deploymentCode.length - bytesTarget.length + 1;\r\n            i += 1\r\n        ) {\r\n            bool found = true;\r\n\r\n            // Check if the current chunk matches the search string\r\n            for (uint256 j = 0; j < bytesTarget.length; j++) {\r\n                if (deploymentCode[i + j] != bytesTarget[j]) {\r\n                    found = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (found) {\r\n                return (true, i);\r\n            }\r\n        }\r\n\r\n        return (false, 0);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bytesStartPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"bankIdHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc20ContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytesStartPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"found_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startPosition_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "ERC20MachineByBankPad", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000066e48b267c2339ce9f033c7fe76989700f0b41b8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bad708c947f4dd78350c4c47dc69d3072f879af0cd5721bd6619cd41ede37f67"}