{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/utils/Array.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.8;\\n\\nlibrary Array {\\n    // @notice compareBytes32Arrays gas < compareBytes32ArraysByLoop gas\\n    // ----------------------------------------------------------------\\n    // gas test\\n    // arrCount   compareBytes32Arrays    compareBytes32ArraysByLoop\\n    // 10         4777                    4986\\n    // 100        34619                   40438\\n    // 1000       360883                  401922\\n    function compareBytes32Arrays(bytes32[] memory arr1, bytes32[] memory arr2) public pure returns (bool) {\\n        if (arr1.length != arr2.length) {\\n            return false;\\n        }\\n\\n        bytes32 hash1 = keccak256(abi.encodePacked(arr1));\\n        bytes32 hash2 = keccak256(abi.encodePacked(arr2));\\n\\n        return hash1 == hash2;\\n    }\\n\\n    function compareBytes32ArraysByLoop(bytes32[] memory arr1, bytes32[] memory arr2) public pure returns (bool) {\\n        if (arr1.length != arr2.length) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < arr1.length; i++) {\\n            if (arr1[i] != arr2[i]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"openzeppelin-upgrades/=lib/openzeppelin-upgrades/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"src/utils/Array.sol\": {\r\n        \"Array\": \"0x926cf8c6c07beaba0ecf55c9c41443614c4bedf1\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"arr1\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"arr2\",\"type\":\"bytes32[]\"}],\"name\":\"compareBytes32Arrays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"arr1\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"arr2\",\"type\":\"bytes32[]\"}],\"name\":\"compareBytes32ArraysByLoop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Array", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}