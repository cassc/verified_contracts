{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"harambe.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {ERC404} from \\\"./ERC404.sol\\\";\\r\\nimport {ERC404UniswapV3Exempt} from \\\"./ERC404UniswapV3Exempt.sol\\\";\\r\\nimport {HARAMBELib} from \\\"HARAMBELib.sol\\\";\\r\\nimport {SafeTransferLib} from \\\"https://github.com/Vectorized/solady/blob/main/src/utils/SafeTransferLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title harambetoken\\r\\n * @notice An ERC404 token\\r\\n * @author\\r\\n */\\r\\ncontract harambe is Ownable, ERC404, ERC404UniswapV3Exempt {\\r\\n    // @dev The maximum total of ERC20 tokens that can exist.\\r\\n    // @dev Each ERC721 is an underlying definition of 10 ** 18 ERC20 tokens.\\r\\n    uint256 public constant MAX_TOTAL_SUPPLY = 1000000 * 10 ** 18;\\r\\n\\r\\n    // @dev Once trading begins, trading cannot be stopped.\\r\\n    bool public tradingStarted;\\r\\n\\r\\n    address public constant MARKETING_WALLET = 0x46269e7486f899D033C50BC6D3094E1b969729B1;\\r\\n\\r\\n    string public baseTokenURI;\\r\\n\\r\\n    address public constant uniswapSwapRouter_ = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\\r\\n    address public constant uniswapV3NonfungiblePositionManager_ = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88;\\r\\n\\r\\n    // CONSTRUCTOR\\r\\n    constructor()\\r\\n        ERC404(\\\"HARAMBE\\\", \\\"HARAMBE\\\", 18)\\r\\n        Ownable(msg.sender)\\r\\n        ERC404UniswapV3Exempt(\\r\\n            uniswapSwapRouter_,\\r\\n            uniswapV3NonfungiblePositionManager_\\r\\n        )\\r\\n    {\\r\\n        _setERC721TransferExempt(address(this), true);\\r\\n        _setERC721TransferExempt(msg.sender, true);\\r\\n        _setERC721TransferExempt(MARKETING_WALLET, true);\\r\\n\\r\\n        _mintERC20(msg.sender, MAX_TOTAL_SUPPLY);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if trading is ready.\\r\\n     * @param _from The address to transfer from.\\r\\n     */\\r\\n    modifier onlyTrading(address _from) {\\r\\n        // @dev Check if trading has been enabled yet.\\r\\n        if (tradingStarted == false) {\\r\\n            // @dev Exempt mints as well as transfers from the owner.\\r\\n            if (_from != address(0) && _from != owner()) {\\r\\n                revert HARAMBELib.TokenLoading();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setTokenURI(string memory _tokenURI) external onlyOwner {\\r\\n        baseTokenURI = _tokenURI;\\r\\n    }\\r\\n\\r\\n        function setBaseUri(string memory _tokenURI) external onlyOwner {\\r\\n        baseTokenURI = _tokenURI;\\r\\n    }\\r\\n\\r\\n            function setDataBaseUri(string memory _tokenURI) external onlyOwner {\\r\\n        baseTokenURI = _tokenURI;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Allow the owner to set the trading status\\r\\n     */\\r\\n    function EnableTrading() external onlyOwner {\\r\\n        tradingStarted = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow the owner to withdraw the contract balance.\\r\\n     */\\r\\n    function withdraw() external onlyOwner {\\r\\n        SafeTransferLib.safeTransferETH(owner(), address(this).balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Recovers a `tokenAmount` of the ERC20 `tokenAddress` locked into this contract\\r\\n     * and sends them to the `tokenReceiver` address.\\r\\n     *\\r\\n     * @param tokenAddress The contract address of the token to recover.\\r\\n     * @param tokenReceiver The address that will receive the recovered tokens.\\r\\n     * @param tokenAmount Number of tokens to be recovered.\\r\\n     */\\r\\n    function recoverERC20(\\r\\n        address tokenAddress,\\r\\n        address tokenReceiver,\\r\\n        uint256 tokenAmount\\r\\n    ) external onlyOwner {\\r\\n        IERC20(tokenAddress).transfer(tokenReceiver, tokenAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Recovers the `tokenId` of the ERC721 `tokenAddress` locked into this contract\\r\\n     * and sends it to the `tokenReceiver` address.\\r\\n     *\\r\\n     * @param tokenAddress The contract address of the token to recover.\\r\\n     * @param tokenReceiver The address that will receive the recovered token.\\r\\n     * @param tokenId The identifier for the NFT to be recovered.\\r\\n     * @param data Additional data with no specified format.\\r\\n     */\\r\\n    function recoverERC721(\\r\\n        address tokenAddress,\\r\\n        address tokenReceiver,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) external onlyOwner {\\r\\n        IERC721(tokenAddress).safeTransferFrom(\\r\\n            address(this),\\r\\n            tokenReceiver,\\r\\n            tokenId,\\r\\n            data\\r\\n        );\\r\\n\\r\\n        \\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (_getOwnerOf(_tokenId) == address(0)) {\\r\\n            revert HARAMBELib.TokenInvalid();\\r\\n        }\\r\\n\\r\\n        if (_tokenId > ID_ENCODING_PREFIX) {\\r\\n            // if greater than the ID, get the unencoded ID\\r\\n            _tokenId -= ID_ENCODING_PREFIX;\\r\\n        }\\r\\n\\r\\n        string memory currentId = Strings.toString(_tokenId);\\r\\n\\r\\n        if (bytes(baseTokenURI).length > 0) {\\r\\n            return string.concat(baseTokenURI, currentId);\\r\\n        }\\r\\n\\r\\n        return string.concat(\\r\\n            \\\"data:application/json;utf8,\\\",\\r\\n            '{\\\"name\\\": \\\"HARAMBE #',\\r\\n            currentId,\\r\\n            '\\\",',\\r\\n            '\\\"description\\\": \\\"Apes together strong\\\",',\\r\\n            '\\\"image\\\": \\\"https://twitter.com/HarambeApes\\\"}'\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice ERC20 trading prevention until the time is ready.\\r\\n     * @param _from The address to transfer from.\\r\\n     * @param _to The address to transfer to.\\r\\n     * @param _value The amount to transfer.\\r\\n     */\\r\\n    function _transferERC20(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) internal override onlyTrading(_from) {\\r\\n        super._transferERC20(_from, _to, _value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice ERC721 trading prevention until the time is ready.\\r\\n     * @dev Realistically this should never be hit, but it is here just\\r\\n     *      to handle edge-cases where the ERC721 is being transferred\\r\\n     *      before the ERC20 is ready to be traded.\\r\\n     * @param _from The address to transfer from.\\r\\n     * @param _to The address to transfer to.\\r\\n     * @param _id The id to transfer.\\r\\n     */\\r\\n    function _transferERC721(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id\\r\\n    ) internal override onlyTrading(_from) {\\r\\n        super._transferERC721(_from, _to, _id);\\r\\n    }\\r\\n\\r\\n    function setERC721TransferExempt(address account_, bool value_)\\r\\n        external\\r\\n        onlyOwner\\r\\n\\r\\n        \\r\\n    {\\r\\n        _setERC721TransferExempt(account_, value_);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"https://github.com/Vectorized/solady/blob/main/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Permit2 operations from (https://github.com/Uniswap/permit2/blob/main/src/libraries/Permit2Lib.sol)\\n///\\n/// @dev Note:\\n/// - For ETH transfers, please use `forceSafeTransferETH` for DoS protection.\\n/// - For ERC20s, this implementation won't check that a token has code,\\n///   responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /// @dev The Permit2 operation has failed.\\n    error Permit2Failed();\\n\\n    /// @dev The Permit2 amount must be less than `2**160 - 1`.\\n    error Permit2AmountOverflow();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH that disallows any storage writes.\\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /// @dev The unique EIP-712 domain domain separator for the DAI token contract.\\n    bytes32 internal constant DAI_DOMAIN_SEPARATOR =\\n        0xdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f7;\\n\\n    /// @dev The address for the WETH9 contract on Ethereum mainnet.\\n    address internal constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    /// @dev The canonical Permit2 address.\\n    /// [Github](https://github.com/Uniswap/permit2)\\n    /// [Etherscan](https://etherscan.io/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)\\n    address internal constant PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    // If the ETH transfer MUST succeed with a reasonable gas budget, use the force variants.\\n    //\\n    // The regular variants:\\n    // - Forwards all remaining gas to the target.\\n    // - Reverts if the target reverts.\\n    // - Reverts if the current contract has insufficient balance.\\n    //\\n    // The force variants:\\n    // - Forwards with an optional gas stipend\\n    //   (defaults to `GAS_STIPEND_NO_GRIEF`, which is sufficient for most cases).\\n    // - If the target reverts, or if the gas stipend is exhausted,\\n    //   creates a temporary contract to force send the ETH via `SELFDESTRUCT`.\\n    //   Future compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758.\\n    // - Reverts if the current contract has insufficient balance.\\n    //\\n    // The try variants:\\n    // - Forwards with a mandatory gas stipend.\\n    // - Instead of reverting, returns whether the transfer succeeded.\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(call(gas(), to, amount, codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends all the ETH in the current contract to `to`.\\n    function safeTransferAllETH(address to) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer all the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if lt(selfbalance(), amount) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            if iszero(call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends all the ETH in the current contract to `to`, with a `gasStipend`.\\n    function forceSafeTransferAllETH(address to, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with `GAS_STIPEND_NO_GRIEF`.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if lt(selfbalance(), amount) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends all the ETH in the current contract to `to`, with `GAS_STIPEND_NO_GRIEF`.\\n    function forceSafeTransferAllETH(address to) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // forgefmt: disable-next-item\\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            success := call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)\\n        }\\n    }\\n\\n    /// @dev Sends all the ETH in the current contract to `to`, with a `gasStipend`.\\n    function trySafeTransferAllETH(address to, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            success := call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            mstore(0x60, amount) // Store the `amount` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    ///\\n    /// The `from` account must have at least `amount` approved for the current contract to manage.\\n    function trySafeTransferFrom(address token, address from, address to, uint256 amount)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            mstore(0x60, amount) // Store the `amount` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\\n            success :=\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have their entire balance approved for the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            mstore(0x0c, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\\n            // Read the balance, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x00, 0x23b872dd) // `transferFrom(address,address,uint256)`.\\n            amount := mload(0x60) // The `amount` is already at 0x60. We'll need to return it.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            // Read the balance, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x14, to) // Store the `to` argument.\\n            amount := mload(0x34) // The `amount` is already at 0x34. We'll need to return it.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n            // Perform the approval, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// If the initial attempt to approve fails, attempts to reset the approved amount to zero,\\n    /// then retries the approval again (some tokens, e.g. USDT, requires this).\\n    /// Reverts upon failure.\\n    function safeApproveWithRetry(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n            // Perform the approval, retrying upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x34, 0) // Store 0 for the `amount`.\\n                mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n                pop(call(gas(), token, 0, 0x10, 0x44, codesize(), 0x00)) // Reset the approval.\\n                mstore(0x34, amount) // Store back the original `amount`.\\n                // Retry the approval, reverting upon failure.\\n                if iszero(\\n                    and(\\n                        or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                        call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                    )\\n                ) {\\n                    mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, account) // Store the `account` argument.\\n            mstore(0x00, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\\n            amount :=\\n                mul( // The arguments of `mul` are evaluated from right to left.\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// If the initial attempt fails, try to use Permit2 to transfer the token.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for the current contract to manage.\\n    function safeTransferFrom2(address token, address from, address to, uint256 amount) internal {\\n        if (!trySafeTransferFrom(token, from, to, amount)) {\\n            permit2TransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to` via Permit2.\\n    /// Reverts upon failure.\\n    function permit2TransferFrom(address token, address from, address to, uint256 amount)\\n        internal\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(add(m, 0x74), shr(96, shl(96, token)))\\n            mstore(add(m, 0x54), amount)\\n            mstore(add(m, 0x34), to)\\n            mstore(add(m, 0x20), shl(96, from))\\n            // `transferFrom(address,address,uint160,address)`.\\n            mstore(m, 0x36c78516000000000000000000000000)\\n            let p := mul(PERMIT2, iszero(shr(160, amount)))\\n            if iszero(mul(call(gas(), p, 0, add(m, 0x10), 0x84, codesize(), 0x00), extcodesize(p)))\\n            {\\n                mstore(0x00, 0x7939f4248757f0fd) // `TransferFromFailed()` or `Permit2AmountOverflow()`.\\n                revert(add(0x18, shl(2, iszero(p))), 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Permit a user to spend a given amount of\\n    /// another user's tokens via native EIP-2612 permit if possible, falling\\n    /// back to Permit2 if native permit fails or is not implemented on the token.\\n    function permit2(\\n        address token,\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        bool success;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} shl(96, xor(token, WETH9)) {} {\\n                mstore(0x00, 0x3644e515) // `DOMAIN_SEPARATOR()`.\\n                if iszero(\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        lt(iszero(mload(0x00)), eq(returndatasize(), 0x20)), // Returns 1 non-zero word.\\n                        // Gas stipend to limit gas burn for tokens that don't refund gas when\\n                        // an non-existing function is called. 5K should be enough for a SLOAD.\\n                        staticcall(5000, token, 0x1c, 0x04, 0x00, 0x20)\\n                    )\\n                ) { break }\\n                let m := mload(0x40)\\n                mstore(add(m, 0x34), spender)\\n                mstore(add(m, 0x20), shl(96, owner))\\n                mstore(add(m, 0x74), deadline)\\n                if eq(mload(0x00), DAI_DOMAIN_SEPARATOR) {\\n                    mstore(0x14, owner)\\n                    mstore(0x00, 0x7ecebe00000000000000000000000000) // `nonces(address)`.\\n                    mstore(add(m, 0x94), staticcall(gas(), token, 0x10, 0x24, add(m, 0x54), 0x20))\\n                    mstore(m, 0x8fcbaf0c000000000000000000000000) // `IDAIPermit.permit`.\\n                    // `nonces` is already at `add(m, 0x54)`.\\n                    // `1` is already stored at `add(m, 0x94)`.\\n                    mstore(add(m, 0xb4), and(0xff, v))\\n                    mstore(add(m, 0xd4), r)\\n                    mstore(add(m, 0xf4), s)\\n                    success := call(gas(), token, 0, add(m, 0x10), 0x104, codesize(), 0x00)\\n                    break\\n                }\\n                mstore(m, 0xd505accf000000000000000000000000) // `IERC20Permit.permit`.\\n                mstore(add(m, 0x54), amount)\\n                mstore(add(m, 0x94), and(0xff, v))\\n                mstore(add(m, 0xb4), r)\\n                mstore(add(m, 0xd4), s)\\n                success := call(gas(), token, 0, add(m, 0x10), 0xe4, codesize(), 0x00)\\n                break\\n            }\\n        }\\n        if (!success) simplePermit2(token, owner, spender, amount, deadline, v, r, s);\\n    }\\n\\n    /// @dev Simple permit on the Permit2 contract.\\n    function simplePermit2(\\n        address token,\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(m, 0x927da105) // `allowance(address,address,address)`.\\n            {\\n                let addressMask := shr(96, not(0))\\n                mstore(add(m, 0x20), and(addressMask, owner))\\n                mstore(add(m, 0x40), and(addressMask, token))\\n                mstore(add(m, 0x60), and(addressMask, spender))\\n                mstore(add(m, 0xc0), and(addressMask, spender))\\n            }\\n            let p := mul(PERMIT2, iszero(shr(160, amount)))\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x5f), // Returns 3 words: `amount`, `expiration`, `nonce`.\\n                    staticcall(gas(), p, add(m, 0x1c), 0x64, add(m, 0x60), 0x60)\\n                )\\n            ) {\\n                mstore(0x00, 0x6b836e6b8757f0fd) // `Permit2Failed()` or `Permit2AmountOverflow()`.\\n                revert(add(0x18, shl(2, iszero(p))), 0x04)\\n            }\\n            mstore(m, 0x2b67b570) // `Permit2.permit` (PermitSingle variant).\\n            // `owner` is already `add(m, 0x20)`.\\n            // `token` is already at `add(m, 0x40)`.\\n            mstore(add(m, 0x60), amount)\\n            mstore(add(m, 0x80), 0xffffffffffff) // `expiration = type(uint48).max`.\\n            // `nonce` is already at `add(m, 0xa0)`.\\n            // `spender` is already at `add(m, 0xc0)`.\\n            mstore(add(m, 0xe0), deadline)\\n            mstore(add(m, 0x100), 0x100) // `signature` offset.\\n            mstore(add(m, 0x120), 0x41) // `signature` length.\\n            mstore(add(m, 0x140), r)\\n            mstore(add(m, 0x160), s)\\n            mstore(add(m, 0x180), shl(248, v))\\n            if iszero(call(gas(), p, 0, add(m, 0x1c), 0x184, codesize(), 0x00)) {\\n                mstore(0x00, 0x6b836e6b) // `Permit2Failed()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"HARAMBELib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nlibrary HARAMBELib {\\r\\n    // @dev The token does not exist.\\r\\n    error TokenInvalid();\\r\\n    // @dev The token is not ready to be traded.\\r\\n    error TokenLoading();\\r\\n}\"\r\n    },\r\n    \"ERC404UniswapV3Exempt.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport {ERC404} from \\\"./ERC404.sol\\\";\\r\\nimport {IPeripheryImmutableState} from \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\\\";\\r\\n\\r\\nabstract contract ERC404UniswapV3Exempt is ERC404 {\\r\\n    error ERC404UniswapV3ExemptFactoryMismatch();\\r\\n    error ERC404UniswapV3ExemptWETH9Mismatch();\\r\\n\\r\\n    constructor(\\r\\n        address uniswapV3Router_,\\r\\n        address uniswapV3NonfungiblePositionManager_\\r\\n    ) {\\r\\n        IPeripheryImmutableState uniswapV3Router = IPeripheryImmutableState(\\r\\n            uniswapV3Router_\\r\\n        );\\r\\n\\r\\n        // Set the Uniswap v3 swap router as exempt.\\r\\n        _setERC721TransferExempt(uniswapV3Router_, true);\\r\\n\\r\\n        IPeripheryImmutableState uniswapV3NonfungiblePositionManager = IPeripheryImmutableState(\\r\\n                uniswapV3NonfungiblePositionManager_\\r\\n            );\\r\\n\\r\\n        // Set the Uniswap v3 nonfungible position manager as exempt.\\r\\n        _setERC721TransferExempt(uniswapV3NonfungiblePositionManager_, true);\\r\\n\\r\\n        // Require the Uniswap v3 factory from the position manager and the swap router to be the same.\\r\\n        if (uniswapV3Router.factory() != uniswapV3NonfungiblePositionManager.factory()) {\\r\\n            revert ERC404UniswapV3ExemptFactoryMismatch();\\r\\n        }\\r\\n\\r\\n        // Require the Uniswap v3 WETH9 from the position manager and the swap router to be the same.\\r\\n        if (uniswapV3Router.WETH9() != uniswapV3NonfungiblePositionManager.WETH9()) {\\r\\n            revert ERC404UniswapV3ExemptWETH9Mismatch();\\r\\n        }\\r\\n\\r\\n        uint24[4] memory feeTiers = [\\r\\n            uint24(100),\\r\\n            uint24(500),\\r\\n            uint24(3_000),\\r\\n            uint24(10_000)\\r\\n        ];\\r\\n\\r\\n        // Determine the Uniswap v3 pair address for this token.\\r\\n        for (uint256 i = 0; i < feeTiers.length; ) {\\r\\n            address uniswapV3Pair = _getUniswapV3Pair(\\r\\n                uniswapV3Router.factory(),\\r\\n                uniswapV3Router.WETH9(),\\r\\n                feeTiers[i]\\r\\n            );\\r\\n\\r\\n            // Set the Uniswap v3 pair as exempt.\\r\\n            _setERC721TransferExempt(uniswapV3Pair, true);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getUniswapV3Pair(\\r\\n        address uniswapV3Factory_,\\r\\n        address weth_,\\r\\n        uint24 fee_\\r\\n    ) private view returns (address) {\\r\\n        address thisAddress = address(this);\\r\\n\\r\\n        (address token0, address token1) = thisAddress < weth_\\r\\n            ? (thisAddress, weth_)\\r\\n            : (weth_, thisAddress);\\r\\n\\r\\n        return\\r\\n            address(\\r\\n                uint160(\\r\\n                    uint256(\\r\\n                        keccak256(\\r\\n                            abi.encodePacked(\\r\\n                                hex\\\"ff\\\",\\r\\n                                uniswapV3Factory_,\\r\\n                                keccak256(abi.encode(token0, token1, fee_)),\\r\\n                                hex\\\"e34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54\\\"\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"ERC404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\r\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\r\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\r\\nimport {IERC404} from \\\"IERC404.sol\\\";\\r\\nimport {PackedDoubleEndedQueue} from \\\"./PackedDoubleEndedQueue.sol\\\";\\r\\nimport {ERC721Events} from \\\"./lib/ERC721Events.sol\\\";\\r\\nimport {ERC20Events} from \\\"./lib/ERC20Events.sol\\\";\\r\\n\\r\\nabstract contract ERC404 is IERC404 {\\r\\n    event ERC721Exempt(address indexed exemptedAddress);\\r\\n\\r\\n    event ERC721Unexempt(address indexed unexemptedAddress);\\r\\n\\r\\n    using PackedDoubleEndedQueue for PackedDoubleEndedQueue.Uint16Deque;\\r\\n\\r\\n    /// @dev The queue of ERC-721 tokens stored in the contract.\\r\\n    PackedDoubleEndedQueue.Uint16Deque private _storedERC721Ids;\\r\\n\\r\\n    /// @dev Token name\\r\\n    string public name;\\r\\n\\r\\n    /// @dev Token symbol\\r\\n    string public symbol;\\r\\n\\r\\n    /// @dev Decimals for ERC-20 representation\\r\\n    uint8 public immutable decimals;\\r\\n\\r\\n    /// @dev Units for ERC-20 representation\\r\\n    uint256 public immutable units;\\r\\n\\r\\n    /// @dev Total supply in ERC-20 representation\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    /// @dev Current mint counter which also represents the highest\\r\\n    ///      minted id, monotonically increasing to ensure accurate ownership\\r\\n    uint256 public minted;\\r\\n\\r\\n    /// @dev Initial chain id for EIP-2612 support\\r\\n    uint256 internal immutable _INITIAL_CHAIN_ID;\\r\\n\\r\\n    /// @dev Initial domain separator for EIP-2612 support\\r\\n    bytes32 internal immutable _INITIAL_DOMAIN_SEPARATOR;\\r\\n\\r\\n    /// @dev Balance of user in ERC-20 representation\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n\\r\\n    /// @dev Allowance of user in ERC-20 representation\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n    /// @dev Approval in ERC-721 representaion\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n\\r\\n    /// @dev Approval for all in ERC-721 representation\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /// @dev Packed representation of ownerOf and owned indices\\r\\n    mapping(uint256 => uint256) internal _ownedData;\\r\\n\\r\\n    /// @dev Array of owned ids in ERC-721 representation\\r\\n    mapping(address => uint16[]) internal _owned;\\r\\n\\r\\n    /// @dev Addresses that are exempt from ERC-721 transfer, typically for gas savings (pairs, routers, etc)\\r\\n    mapping(address => bool) internal _erc721TransferExempt;\\r\\n\\r\\n    /// @dev EIP-2612 nonces\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    /// @dev Address bitmask for packed ownership data\\r\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\r\\n\\r\\n    /// @dev Owned index bitmask for packed ownership data\\r\\n    uint256 private constant _BITMASK_OWNED_INDEX = ((1 << 96) - 1) << 160;\\r\\n\\r\\n    /// @dev Constant for token id encoding\\r\\n    uint256 public constant ID_ENCODING_PREFIX = 1 << 255;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\r\\n        name = name_;\\r\\n        symbol = symbol_;\\r\\n\\r\\n        if (decimals_ < 18) {\\r\\n            revert DecimalsTooLow();\\r\\n        }\\r\\n\\r\\n        decimals = decimals_;\\r\\n        units = 10 ** decimals;\\r\\n\\r\\n        // EIP-2612 initialization\\r\\n        _INITIAL_CHAIN_ID = block.chainid;\\r\\n        _INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\\r\\n    }\\r\\n\\r\\n    /// @notice Function to find owner of a given ERC-721 token\\r\\n    function ownerOf(\\r\\n        uint256 id_\\r\\n    ) public view virtual returns (address erc721Owner) {\\r\\n        erc721Owner = _getOwnerOf(id_);\\r\\n\\r\\n        if (!_isValidTokenId(id_)) {\\r\\n            revert InvalidTokenId();\\r\\n        }\\r\\n\\r\\n        if (erc721Owner == address(0)) {\\r\\n            revert NotFound();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function owned(\\r\\n        address owner_\\r\\n    ) public view virtual returns (uint256[] memory) {\\r\\n        uint256[] memory ownedAsU256 = new uint256[](_owned[owner_].length);\\r\\n\\r\\n        for (uint256 i = 0; i < _owned[owner_].length; ) {\\r\\n            ownedAsU256[i] = ID_ENCODING_PREFIX + _owned[owner_][i];\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return ownedAsU256;\\r\\n    }\\r\\n\\r\\n    function erc721BalanceOf(\\r\\n        address owner_\\r\\n    ) public view virtual returns (uint256) {\\r\\n        return _owned[owner_].length;\\r\\n    }\\r\\n\\r\\n    function erc20BalanceOf(\\r\\n        address owner_\\r\\n    ) public view virtual returns (uint256) {\\r\\n        return balanceOf[owner_];\\r\\n    }\\r\\n\\r\\n    function erc20TotalSupply() public view virtual returns (uint256) {\\r\\n        return totalSupply;\\r\\n    }\\r\\n\\r\\n    function erc721TotalSupply() public view virtual returns (uint256) {\\r\\n        return minted;\\r\\n    }\\r\\n\\r\\n    function getERC721QueueLength() public view virtual returns (uint256) {\\r\\n        return _storedERC721Ids.length();\\r\\n    }\\r\\n\\r\\n    function getERC721TokensInQueue(\\r\\n        uint256 start_,\\r\\n        uint256 count_\\r\\n    ) public view virtual returns (uint256[] memory) {\\r\\n        uint256[] memory tokensInQueue = new uint256[](count_);\\r\\n\\r\\n        for (uint256 i = start_; i < start_ + count_; ) {\\r\\n            tokensInQueue[i - start_] =\\r\\n                ID_ENCODING_PREFIX +\\r\\n                _storedERC721Ids.at(i);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tokensInQueue;\\r\\n    }\\r\\n\\r\\n    /// @notice tokenURI must be implemented by child contract\\r\\n    function tokenURI(uint256 id_) public view virtual returns (string memory);\\r\\n\\r\\n    /// @dev This function assumes the operator is attempting to approve\\r\\n    ///      an ERC-721 if valueOrId_ is a possibly valid ERC-721 token id.\\r\\n    ///      Unlike setApprovalForAll, spender_ must be allowed to be 0x0 so\\r\\n    ///      that approval can be revoked.\\r\\n    function approve(\\r\\n        address spender_,\\r\\n        uint256 valueOrId_\\r\\n    ) public virtual returns (bool) {\\r\\n        if (_isValidTokenId(valueOrId_)) {\\r\\n            erc721Approve(spender_, valueOrId_);\\r\\n        } else {\\r\\n            return erc20Approve(spender_, valueOrId_);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function erc721Approve(address spender_, uint256 id_) public virtual {\\r\\n        // Intention is to approve as ERC-721 token (id).\\r\\n        address erc721Owner = _getOwnerOf(id_);\\r\\n\\r\\n        if (\\r\\n            msg.sender != erc721Owner &&\\r\\n            !isApprovedForAll[erc721Owner][msg.sender]\\r\\n        ) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n\\r\\n        getApproved[id_] = spender_;\\r\\n\\r\\n        emit ERC721Approval(erc721Owner, spender_, id_);\\r\\n        emit ERC721Events.Approval(erc721Owner, spender_, id_);\\r\\n    }\\r\\n\\r\\n    /// @dev Providing type(uint256).max for approval value results in an\\r\\n    ///      unlimited approval that is not deducted from on transfers.\\r\\n    function erc20Approve(\\r\\n        address spender_,\\r\\n        uint256 value_\\r\\n    ) public virtual returns (bool) {\\r\\n        // Prevent granting 0x0 an ERC-20 allowance.\\r\\n        if (spender_ == address(0)) {\\r\\n            revert InvalidSpender();\\r\\n        }\\r\\n\\r\\n        // Intention is to approve as ERC-20 token (value).\\r\\n        allowance[msg.sender][spender_] = value_;\\r\\n\\r\\n        emit ERC20Approval(msg.sender, spender_, value_);\\r\\n        emit ERC20Events.Approval(msg.sender, spender_, value_);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-721 approvals\\r\\n    function setApprovalForAll(\\r\\n        address operator_,\\r\\n        bool approved_\\r\\n    ) public virtual {\\r\\n        // Prevent approvals to 0x0.\\r\\n        if (operator_ == address(0)) {\\r\\n            revert InvalidOperator();\\r\\n        }\\r\\n        isApprovedForAll[msg.sender][operator_] = approved_;\\r\\n        emit ERC721Events.ApprovalForAll(msg.sender, operator_, approved_);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for mixed transfers from an operator that may be different than 'from'.\\r\\n    /// @dev This function assumes the operator is attempting to transfer an ERC-721\\r\\n    ///      if valueOrId is a possible valid token id.\\r\\n    function transferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 valueOrId_\\r\\n    ) public virtual returns (bool) {\\r\\n        if (_isValidTokenId(valueOrId_)) {\\r\\n            erc721TransferFrom(from_, to_, valueOrId_);\\r\\n        } else {\\r\\n            // Intention is to transfer as ERC-20 token (value).\\r\\n            return erc20TransferFrom(from_, to_, valueOrId_);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-721 transfers from.\\r\\n    /// @dev This function is recommended for ERC721 transfers.\\r\\n    function erc721TransferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 id_\\r\\n    ) public virtual {\\r\\n        // Prevent minting tokens from 0x0.\\r\\n        if (from_ == address(0)) {\\r\\n            revert InvalidSender();\\r\\n        }\\r\\n\\r\\n        // Prevent burning tokens to 0x0.\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        if (from_ != _getOwnerOf(id_)) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n\\r\\n        // Check that the operator is either the sender or approved for the transfer.\\r\\n        if (\\r\\n            msg.sender != from_ &&\\r\\n            !isApprovedForAll[from_][msg.sender] &&\\r\\n            msg.sender != getApproved[id_]\\r\\n        ) {\\r\\n            revert Unauthorized();\\r\\n        }\\r\\n\\r\\n        // We only need to check ERC-721 transfer exempt status for the recipient \\r\\n        // since the sender being ERC-721 transfer exempt means they have already \\r\\n        // had their ERC-721s stripped away during the rebalancing process.\\r\\n        if (erc721TransferExempt(to_)) {\\r\\n            revert RecipientIsERC721TransferExempt();\\r\\n        }\\r\\n\\r\\n        // Transfer 1 * units ERC-20 and 1 ERC-721 token.\\r\\n        // ERC-721 transfer exemptions handled above. Can't make it to this point if either is transfer exempt.\\r\\n        _transferERC20(from_, to_, units);\\r\\n        _transferERC721(from_, to_, id_);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-20 transfers from.\\r\\n    /// @dev This function is recommended for ERC20 transfers\\r\\n    function erc20TransferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 value_\\r\\n    ) public virtual returns (bool) {\\r\\n        // Prevent minting tokens from 0x0.\\r\\n        if (from_ == address(0)) {\\r\\n            revert InvalidSender();\\r\\n        }\\r\\n\\r\\n        // Prevent burning tokens to 0x0.\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        // Intention is to transfer as ERC-20 token (value).\\r\\n        uint256 allowed = allowance[from_][msg.sender];\\r\\n\\r\\n        // Check that the operator has sufficient allowance.\\r\\n        if (allowed != type(uint256).max) {\\r\\n            allowance[from_][msg.sender] = allowed - value_;\\r\\n        }\\r\\n\\r\\n        // Transferring ERC-20s directly requires the _transferERC20WithERC721 function.\\r\\n        // Handles ERC-721 exemptions internally.\\r\\n        return _transferERC20WithERC721(from_, to_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-20 transfers.\\r\\n    /// @dev This function assumes the operator is attempting to transfer as ERC-20\\r\\n    ///      given this function is only supported on the ERC-20 interface.\\r\\n    ///      Treats even small amounts that are valid ERC-721 ids as ERC-20s.\\r\\n    function transfer(\\r\\n        address to_,\\r\\n        uint256 value_\\r\\n    ) public virtual returns (bool) {\\r\\n        // Prevent burning tokens to 0x0.\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        // Transferring ERC-20s directly requires the _transferERC20WithERC721 function.\\r\\n        // Handles ERC-721 exemptions internally.\\r\\n        return _transferERC20WithERC721(msg.sender, to_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-721 transfers with contract support.\\r\\n    /// This function only supports moving valid ERC-721 ids, as it does not exist on the ERC-20\\r\\n    /// spec and will revert otherwise.\\r\\n    function safeTransferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 id_\\r\\n    ) public virtual {\\r\\n        safeTransferFrom(from_, to_, id_, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-721 transfers with contract support and callback data.\\r\\n    /// This function only supports moving valid ERC-721 ids, as it does not exist on the\\r\\n    /// ERC-20 spec and will revert otherwise.\\r\\n    function safeTransferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 id_,\\r\\n        bytes memory data_\\r\\n    ) public virtual {\\r\\n        if (!_isValidTokenId(id_)) {\\r\\n            revert InvalidTokenId();\\r\\n        }\\r\\n\\r\\n        transferFrom(from_, to_, id_);\\r\\n\\r\\n        if (\\r\\n            to_.code.length != 0 &&\\r\\n            IERC721Receiver(to_).onERC721Received(\\r\\n                msg.sender,\\r\\n                from_,\\r\\n                id_,\\r\\n                data_\\r\\n            ) !=\\r\\n            IERC721Receiver.onERC721Received.selector\\r\\n        ) {\\r\\n            revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function for EIP-2612 permits (ERC-20 only)\\r\\n    /// @dev Providing type(uint256).max for permit value results in an\\r\\n    ///      unlimited approval that is not deducted from on transfers.\\r\\n    function permit(\\r\\n        address owner_,\\r\\n        address spender_,\\r\\n        uint256 value_,\\r\\n        uint256 deadline_,\\r\\n        uint8 v_,\\r\\n        bytes32 r_,\\r\\n        bytes32 s_\\r\\n    ) public virtual {\\r\\n        if (deadline_ < block.timestamp) {\\r\\n            revert PermitDeadlineExpired();\\r\\n        }\\r\\n\\r\\n        // permit cannot be used for ERC-721 token approvals, so ensure\\r\\n        // the value does not fall within the valid range of ERC-721 token ids.\\r\\n        if (_isValidTokenId(value_)) {\\r\\n            revert InvalidApproval();\\r\\n        }\\r\\n\\r\\n        if (spender_ == address(0)) {\\r\\n            revert InvalidSpender();\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            address recoveredAddress = ecrecover(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"\\\\x19\\\\x01\\\",\\r\\n                        DOMAIN_SEPARATOR(),\\r\\n                        keccak256(\\r\\n                            abi.encode(\\r\\n                                keccak256(\\r\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\r\\n                                ),\\r\\n                                owner_,\\r\\n                                spender_,\\r\\n                                value_,\\r\\n                                nonces[owner_]++,\\r\\n                                deadline_\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                ),\\r\\n                v_,\\r\\n                r_,\\r\\n                s_\\r\\n            );\\r\\n\\r\\n            if (recoveredAddress == address(0) || recoveredAddress != owner_) {\\r\\n                revert InvalidSigner();\\r\\n            }\\r\\n\\r\\n            allowance[recoveredAddress][spender_] = value_;\\r\\n        }\\r\\n\\r\\n        emit ERC20Approval(owner_, spender_, value_);\\r\\n        emit ERC20Events.Approval(owner_, spender_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns domain initial domain separator, or recomputes if chain id is not equal to initial chain id\\r\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\r\\n        return\\r\\n            block.chainid == _INITIAL_CHAIN_ID\\r\\n                ? _INITIAL_DOMAIN_SEPARATOR\\r\\n                : _computeDomainSeparator();\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view virtual returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC404).interfaceId ||\\r\\n            interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n\\r\\n    /// @notice Function for self-exemption\\r\\n    function setSelfERC721TransferExempt(bool state_) public virtual {\\r\\n        _setERC721TransferExempt(msg.sender, state_);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to check if address is transfer exempt\\r\\n    function erc721TransferExempt(\\r\\n        address target_\\r\\n    ) public view virtual returns (bool) {\\r\\n        return target_ == address(0) || _erc721TransferExempt[target_];\\r\\n    }\\r\\n\\r\\n    /// @notice For a token token id to be considered valid, it just needs\\r\\n    ///         to fall within the range of possible token ids, it does not\\r\\n    ///         necessarily have to be minted yet.\\r\\n    function _isValidTokenId(uint256 id_) internal pure returns (bool) {\\r\\n        return id_ > ID_ENCODING_PREFIX && id_ != type(uint256).max;\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to compute domain separator for EIP-2612 permits\\r\\n    function _computeDomainSeparator() internal view virtual returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    keccak256(\\r\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n                    ),\\r\\n                    keccak256(bytes(name)),\\r\\n                    keccak256(\\\"1\\\"),\\r\\n                    block.chainid,\\r\\n                    address(this)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice This is the lowest level ERC-20 transfer function, which\\r\\n    ///         should be used for both normal ERC-20 transfers as well as minting.\\r\\n    /// Note that this function allows transfers to and from 0x0.\\r\\n    function _transferERC20(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 value_\\r\\n    ) internal virtual {\\r\\n        // Minting is a special case for which we should not check the balance of\\r\\n        // the sender, and we should increase the total supply.\\r\\n        if (from_ == address(0)) {\\r\\n            totalSupply += value_;\\r\\n        } else {\\r\\n            // Deduct value from sender's balance.\\r\\n            balanceOf[from_] -= value_;\\r\\n        }\\r\\n\\r\\n        // Update the recipient's balance.\\r\\n        // Can be unchecked because on mint, adding to totalSupply is checked, and on transfer balance deduction is checked.\\r\\n        unchecked {\\r\\n            balanceOf[to_] += value_;\\r\\n        }\\r\\n\\r\\n        emit ERC20Transfer(from_, to_, value_);\\r\\n        emit ERC20Events.Transfer(from_, to_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Consolidated record keeping function for transferring ERC-721s.\\r\\n    /// @dev Assign the token to the new owner, and remove from the old owner.\\r\\n    /// Note that this function allows transfers to and from 0x0.\\r\\n    /// Does not handle ERC-721 exemptions.\\r\\n    function _transferERC721(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 id_\\r\\n    ) internal virtual {\\r\\n        // If this is not a mint, handle record keeping for transfer from previous owner.\\r\\n        if (from_ != address(0)) {\\r\\n            // On transfer of an NFT, any previous approval is reset.\\r\\n            delete getApproved[id_];\\r\\n\\r\\n            uint256 updatedId = ID_ENCODING_PREFIX +\\r\\n                _owned[from_][_owned[from_].length - 1];\\r\\n            if (updatedId != id_) {\\r\\n                uint256 updatedIndex = _getOwnedIndex(id_);\\r\\n                // update _owned for sender\\r\\n                _owned[from_][updatedIndex] = uint16(updatedId);\\r\\n                // update index for the moved id\\r\\n                _setOwnedIndex(updatedId, updatedIndex);\\r\\n            }\\r\\n\\r\\n            // pop\\r\\n            _owned[from_].pop();\\r\\n        }\\r\\n\\r\\n        // Check if this is a burn.\\r\\n        if (to_ != address(0)) {\\r\\n            // If not a burn, update the owner of the token to the new owner.\\r\\n            // Update owner of the token to the new owner.\\r\\n            _setOwnerOf(id_, to_);\\r\\n            // Push token onto the new owner's stack.\\r\\n            _owned[to_].push(uint16(id_));\\r\\n            // Update index for new owner's stack.\\r\\n            _setOwnedIndex(id_, _owned[to_].length - 1);\\r\\n        } else {\\r\\n            // If this is a burn, reset the owner of the token to 0x0 by deleting the token from _ownedData.\\r\\n            delete _ownedData[id_];\\r\\n        }\\r\\n\\r\\n        emit ERC721Transfer(from_, to_, id_);\\r\\n        emit ERC721Events.Transfer(from_, to_, id_);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for ERC-20 transfers. Also handles any ERC-721 transfers that may be required.\\r\\n    // Handles ERC-721 exemptions.\\r\\n    function _transferERC20WithERC721(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 value_\\r\\n    ) internal virtual returns (bool) {\\r\\n        uint256 erc20BalanceOfSenderBefore = erc20BalanceOf(from_);\\r\\n        uint256 erc20BalanceOfReceiverBefore = erc20BalanceOf(to_);\\r\\n\\r\\n        _transferERC20(from_, to_, value_);\\r\\n\\r\\n        // Preload for gas savings on branches\\r\\n        bool isFromERC721TransferExempt = erc721TransferExempt(from_);\\r\\n        bool isToERC721TransferExempt = erc721TransferExempt(to_);\\r\\n\\r\\n        // Skip _withdrawAndStoreERC721 and/or _retrieveOrMintERC721 for ERC-721 transfer exempt addresses\\r\\n        // 1) to save gas\\r\\n        // 2) because ERC-721 transfer exempt addresses won't always have/need ERC-721s corresponding to their ERC20s.\\r\\n        if (isFromERC721TransferExempt && isToERC721TransferExempt) {\\r\\n            // Case 1) Both sender and recipient are ERC-721 transfer exempt. No ERC-721s need to be transferred.\\r\\n            // NOOP.\\r\\n        } else if (isFromERC721TransferExempt) {\\r\\n            // Case 2) The sender is ERC-721 transfer exempt, but the recipient is not. Contract should not attempt\\r\\n            //         to transfer ERC-721s from the sender, but the recipient should receive ERC-721s\\r\\n            //         from the bank/minted for any whole number increase in their balance.\\r\\n            // Only cares about whole number increments.\\r\\n            uint256 tokensToRetrieveOrMint = (balanceOf[to_] / units) -\\r\\n                (erc20BalanceOfReceiverBefore / units);\\r\\n            for (uint256 i = 0; i < tokensToRetrieveOrMint; ) {\\r\\n                _retrieveOrMintERC721(to_);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        } else if (isToERC721TransferExempt) {\\r\\n            // Case 3) The sender is not ERC-721 transfer exempt, but the recipient is. Contract should attempt\\r\\n            //         to withdraw and store ERC-721s from the sender, but the recipient should not\\r\\n            //         receive ERC-721s from the bank/minted.\\r\\n            // Only cares about whole number increments.\\r\\n            uint256 tokensToWithdrawAndStore = (erc20BalanceOfSenderBefore /\\r\\n                units) - (balanceOf[from_] / units);\\r\\n            for (uint256 i = 0; i < tokensToWithdrawAndStore; ) {\\r\\n                _withdrawAndStoreERC721(from_);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            // Case 4) Neither the sender nor the recipient are ERC-721 transfer exempt.\\r\\n            // Strategy:\\r\\n            // 1. First deal with the whole tokens. These are easy and will just be transferred.\\r\\n            // 2. Look at the fractional part of the value:\\r\\n            //   a) If it causes the sender to lose a whole token that was represented by an NFT due to a\\r\\n            //      fractional part being transferred, withdraw and store an additional NFT from the sender.\\r\\n            //   b) If it causes the receiver to gain a whole new token that should be represented by an NFT\\r\\n            //      due to receiving a fractional part that completes a whole token, retrieve or mint an NFT to the recevier.\\r\\n\\r\\n            // Whole tokens worth of ERC-20s get transferred as ERC-721s without any burning/minting.\\r\\n            uint256 nftsToTransfer = value_ / units;\\r\\n            for (uint256 i = 0; i < nftsToTransfer; ) {\\r\\n                // Pop from sender's ERC-721 stack and transfer them (LIFO)\\r\\n                uint256 indexOfLastToken = _owned[from_].length - 1;\\r\\n                uint256 tokenId = ID_ENCODING_PREFIX +\\r\\n                    _owned[from_][indexOfLastToken];\\r\\n                _transferERC721(from_, to_, tokenId);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If the transfer changes either the sender or the recipient's holdings from a fractional to a non-fractional\\r\\n            // amount (or vice versa), adjust ERC-721s.\\r\\n\\r\\n            // First check if the send causes the sender to lose a whole token that was represented by an ERC-721\\r\\n            // due to a fractional part being transferred.\\r\\n            //\\r\\n            // Process:\\r\\n            // Take the difference between the whole number of tokens before and after the transfer for the sender.\\r\\n            // If that difference is greater than the number of ERC-721s transferred (whole units), then there was\\r\\n            // an additional ERC-721 lost due to the fractional portion of the transfer.\\r\\n            // If this is a self-send and the before and after balances are equal (not always the case but often),\\r\\n            // then no ERC-721s will be lost here.\\r\\n            if (\\r\\n                erc20BalanceOfSenderBefore /\\r\\n                    units -\\r\\n                    erc20BalanceOf(from_) /\\r\\n                    units >\\r\\n                nftsToTransfer\\r\\n            ) {\\r\\n                _withdrawAndStoreERC721(from_);\\r\\n            }\\r\\n\\r\\n            // Then, check if the transfer causes the receiver to gain a whole new token which requires gaining\\r\\n            // an additional ERC-721.\\r\\n            //\\r\\n            // Process:\\r\\n            // Take the difference between the whole number of tokens before and after the transfer for the recipient.\\r\\n            // If that difference is greater than the number of ERC-721s transferred (whole units), then there was\\r\\n            // an additional ERC-721 gained due to the fractional portion of the transfer.\\r\\n            // Again, for self-sends where the before and after balances are equal, no ERC-721s will be gained here.\\r\\n            if (\\r\\n                erc20BalanceOf(to_) /\\r\\n                    units -\\r\\n                    erc20BalanceOfReceiverBefore /\\r\\n                    units >\\r\\n                nftsToTransfer\\r\\n            ) {\\r\\n                _retrieveOrMintERC721(to_);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for ERC20 minting\\r\\n    /// @dev This function will allow minting of new ERC20s.\\r\\n    ///      If mintCorrespondingERC721s_ is true, and the recipient is not ERC-721 exempt, it will\\r\\n    ///      also mint the corresponding ERC721s.\\r\\n    /// Handles ERC-721 exemptions.\\r\\n    function _mintERC20(address to_, uint256 value_) internal virtual {\\r\\n        /// You cannot mint to the zero address (you can't mint and immediately burn in the same transfer).\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        if (totalSupply + value_ > ID_ENCODING_PREFIX) {\\r\\n            revert MintLimitReached();\\r\\n        }\\r\\n\\r\\n        _transferERC20WithERC721(address(0), to_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for ERC-721 minting and retrieval from the bank.\\r\\n    /// @dev This function will allow minting of new ERC-721s up to the total fractional supply. It will\\r\\n    ///      first try to pull from the bank, and if the bank is empty, it will mint a new token.\\r\\n    /// Does not handle ERC-721 exemptions.\\r\\n    function _retrieveOrMintERC721(address to_) internal virtual {\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        uint256 id;\\r\\n\\r\\n        if (!_storedERC721Ids.empty()) {\\r\\n            // If there are any tokens in the bank, use those first.\\r\\n            // Pop off the end of the queue (FIFO).\\r\\n            id = ID_ENCODING_PREFIX + _storedERC721Ids.popBack();\\r\\n        } else {\\r\\n            // Otherwise, mint a new token, should not be able to go over the total fractional supply.\\r\\n            ++minted;\\r\\n\\r\\n            // Reserve max uint256 for approvals\\r\\n            if (minted == type(uint256).max) {\\r\\n                revert MintLimitReached();\\r\\n            }\\r\\n\\r\\n            id = ID_ENCODING_PREFIX + minted;\\r\\n        }\\r\\n\\r\\n        address erc721Owner = _getOwnerOf(id);\\r\\n\\r\\n        // The token should not already belong to anyone besides 0x0 or this contract.\\r\\n        // If it does, something is wrong, as this should never happen.\\r\\n        if (erc721Owner != address(0)) {\\r\\n            revert AlreadyExists();\\r\\n        }\\r\\n\\r\\n        // Transfer the token to the recipient, either transferring from the contract's bank or minting.\\r\\n        // Does not handle ERC-721 exemptions.\\r\\n        _transferERC721(erc721Owner, to_, id);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for ERC-721 deposits to bank (this contract).\\r\\n    /// @dev This function will allow depositing of ERC-721s to the bank, which can be retrieved by future minters.\\r\\n    // Does not handle ERC-721 exemptions.\\r\\n    function _withdrawAndStoreERC721(address from_) internal virtual {\\r\\n        if (from_ == address(0)) {\\r\\n            revert InvalidSender();\\r\\n        }\\r\\n\\r\\n        // Retrieve the latest token added to the owner's stack (LIFO).\\r\\n        uint256 id = ID_ENCODING_PREFIX +\\r\\n            _owned[from_][_owned[from_].length - 1];\\r\\n\\r\\n        // Transfer to 0x0.\\r\\n        // Does not handle ERC-721 exemptions.\\r\\n        _transferERC721(from_, address(0), id);\\r\\n\\r\\n        // Record the token in the contract's bank queue.\\r\\n        _storedERC721Ids.pushFront(uint16(id));\\r\\n    }\\r\\n\\r\\n    /// @notice Initialization function to set pairs / etc, saving gas by avoiding mint / burn on unnecessary targets\\r\\n    function _setERC721TransferExempt(\\r\\n        address target_,\\r\\n        bool state_\\r\\n    ) internal virtual {\\r\\n        if (target_ == address(0)) {\\r\\n            revert InvalidExemption();\\r\\n        }\\r\\n\\r\\n        // Adjust the ERC721 balances of the target to respect exemption rules.\\r\\n        // Despite this logic, it is still recommended practice to exempt prior to the target\\r\\n        // having an active balance.\\r\\n        if (state_) {\\r\\n            _clearERC721Balance(target_);\\r\\n        } else {\\r\\n            _reinstateERC721Balance(target_);\\r\\n        }\\r\\n\\r\\n        _erc721TransferExempt[target_] = state_;\\r\\n    }\\r\\n\\r\\n    /// @notice Function to reinstate balance on exemption removal\\r\\n    function _reinstateERC721Balance(address target_) private {\\r\\n        uint256 expectedERC721Balance = erc20BalanceOf(target_) / units;\\r\\n        uint256 actualERC721Balance = erc721BalanceOf(target_);\\r\\n\\r\\n        for (uint256 i = 0; i < expectedERC721Balance - actualERC721Balance; ) {\\r\\n            // Transfer ERC721 balance in from pool\\r\\n            _retrieveOrMintERC721(target_);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit ERC721Unexempt(target_);\\r\\n    }\\r\\n\\r\\n    /// @notice Function to clear balance on exemption inclusion\\r\\n    function _clearERC721Balance(address target_) private {\\r\\n        uint256 erc721Balance = erc721BalanceOf(target_);\\r\\n\\r\\n        for (uint256 i = 0; i < erc721Balance; ) {\\r\\n            // Transfer out ERC721 balance\\r\\n            _withdrawAndStoreERC721(target_);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit ERC721Exempt(target_);\\r\\n    }\\r\\n\\r\\n    function _getOwnerOf(\\r\\n        uint256 id_\\r\\n    ) internal view virtual returns (address ownerOf_) {\\r\\n        uint256 data = _ownedData[id_];\\r\\n\\r\\n        assembly {\\r\\n            ownerOf_ := and(data, _BITMASK_ADDRESS)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setOwnerOf(uint256 id_, address owner_) internal virtual {\\r\\n        uint256 data = _ownedData[id_];\\r\\n\\r\\n        assembly {\\r\\n            data := add(\\r\\n                and(data, _BITMASK_OWNED_INDEX),\\r\\n                and(owner_, _BITMASK_ADDRESS)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        _ownedData[id_] = data;\\r\\n    }\\r\\n\\r\\n    function _getOwnedIndex(\\r\\n        uint256 id_\\r\\n    ) internal view virtual returns (uint256 ownedIndex_) {\\r\\n        uint256 data = _ownedData[id_];\\r\\n\\r\\n        assembly {\\r\\n            ownedIndex_ := shr(160, data)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setOwnedIndex(uint256 id_, uint256 index_) internal virtual {\\r\\n        uint256 data = _ownedData[id_];\\r\\n\\r\\n        if (index_ > _BITMASK_OWNED_INDEX >> 160) {\\r\\n            revert OwnedIndexOverflow();\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            data := add(\\r\\n                and(data, _BITMASK_ADDRESS),\\r\\n                and(shl(160, index_), _BITMASK_OWNED_INDEX)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        _ownedData[id_] = data;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/ERC20Events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nlibrary ERC20Events {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed amount\\r\\n    );\\r\\n}\"\r\n    },\r\n    \"lib/ERC721Events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nlibrary ERC721Events {\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n}\"\r\n    },\r\n    \"PackedDoubleEndedQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/DoubleEndedQueue.sol)\\r\\n// Modified by Pandora Labs to support native packed operations\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\r\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\r\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\r\\n * the existing queue contents are left in storage.\\r\\n *\\r\\n * The struct is called `Uint16Deque`. And is designed for packed uint16 values, though this approach can be\\r\\n * extrapolated to different implementations. This data structure can only be used in storage, and not in memory.\\r\\n *\\r\\n * ```solidity\\r\\n * PackedDoubleEndedQueue.Uint16Deque queue;\\r\\n * ```\\r\\n */\\r\\nlibrary PackedDoubleEndedQueue {\\r\\n    uint128 constant SLOT_MASK = (1 << 64) - 1;\\r\\n    uint128 constant INDEX_MASK = SLOT_MASK << 64;\\r\\n\\r\\n    uint256 constant SLOT_DATA_MASK = (1 << 16) - 1;\\r\\n\\r\\n    /**\\r\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\r\\n     */\\r\\n    error QueueEmpty();\\r\\n\\r\\n    /**\\r\\n     * @dev A push operation couldn't be completed due to the queue being full.\\r\\n     */\\r\\n    error QueueFull();\\r\\n\\r\\n    /**\\r\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\r\\n     */\\r\\n    error QueueOutOfBounds();\\r\\n\\r\\n    /**\\r\\n     * @dev Invalid slot.\\r\\n     */\\r\\n    error InvalidSlot();\\r\\n\\r\\n    /**\\r\\n     * @dev Indices and slots are 64 bits to fit within a single storage slot.\\r\\n     *\\r\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\r\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\r\\n     * lead to unexpected behavior.\\r\\n     *\\r\\n     * The first item is at data[begin] and the last item is at data[end - 1]. This range can wrap around.\\r\\n     */\\r\\n    struct Uint16Deque {\\r\\n        uint64 _beginIndex;\\r\\n        uint64 _beginSlot;\\r\\n        uint64 _endIndex;\\r\\n        uint64 _endSlot;\\r\\n        mapping(uint64 index => uint256) _data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes the item at the end of the queue and returns it.\\r\\n     *\\r\\n     * Reverts with {QueueEmpty} if the queue is empty.\\r\\n     */\\r\\n    function popBack(\\r\\n        Uint16Deque storage deque\\r\\n    ) internal returns (uint16 value) {\\r\\n        unchecked {\\r\\n            uint64 backIndex = deque._endIndex;\\r\\n            uint64 backSlot = deque._endSlot;\\r\\n\\r\\n            if (backIndex == deque._beginIndex && backSlot == deque._beginSlot)\\r\\n                revert QueueEmpty();\\r\\n\\r\\n            if (backSlot == 0) {\\r\\n                --backIndex;\\r\\n                backSlot = 15;\\r\\n            } else {\\r\\n                --backSlot;\\r\\n            }\\r\\n\\r\\n            uint256 data = deque._data[backIndex];\\r\\n\\r\\n            value = _getEntry(data, backSlot);\\r\\n            deque._data[backIndex] = _setData(data, backSlot, 0);\\r\\n\\r\\n            deque._endIndex = backIndex;\\r\\n            deque._endSlot = backSlot;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Inserts an item at the beginning of the queue.\\r\\n     *\\r\\n     * Reverts with {QueueFull} if the queue is full.\\r\\n     */\\r\\n    function pushFront(Uint16Deque storage deque, uint16 value_) internal {\\r\\n        unchecked {\\r\\n            uint64 frontIndex = deque._beginIndex;\\r\\n            uint64 frontSlot = deque._beginSlot;\\r\\n\\r\\n            if (frontSlot == 0) {\\r\\n                --frontIndex;\\r\\n                frontSlot = 15;\\r\\n            } else {\\r\\n                --frontSlot;\\r\\n            }\\r\\n\\r\\n            if (frontIndex == deque._endIndex && frontSlot == deque._endSlot)\\r\\n                revert QueueFull();\\r\\n\\r\\n            deque._data[frontIndex] = _setData(\\r\\n                deque._data[frontIndex],\\r\\n                frontSlot,\\r\\n                value_\\r\\n            );\\r\\n            deque._beginIndex = frontIndex;\\r\\n            deque._beginSlot = frontSlot;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\r\\n     * `length(deque) - 1`.\\r\\n     *\\r\\n     * Reverts with `QueueOutOfBounds` if the index is out of bounds.\\r\\n     */\\r\\n    function at(\\r\\n        Uint16Deque storage deque,\\r\\n        uint256 index_\\r\\n    ) internal view returns (uint16 value) {\\r\\n        if (index_ >= length(deque) * 16) revert QueueOutOfBounds();\\r\\n\\r\\n        unchecked {\\r\\n            return\\r\\n                _getEntry(\\r\\n                    deque._data[\\r\\n                        deque._beginIndex +\\r\\n                            uint64(deque._beginSlot + (index_ % 16)) /\\r\\n                            16 +\\r\\n                            uint64(index_ / 16)\\r\\n                    ],\\r\\n                    uint64(((deque._beginSlot + index_) % 16))\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of items in the queue.\\r\\n     */\\r\\n    function length(Uint16Deque storage deque) internal view returns (uint256) {\\r\\n        unchecked {\\r\\n            return\\r\\n                (16 - deque._beginSlot) +\\r\\n                deque._endSlot +\\r\\n                deque._endIndex *\\r\\n                16 -\\r\\n                deque._beginIndex *\\r\\n                16 -\\r\\n                16;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the queue is empty.\\r\\n     */\\r\\n    function empty(Uint16Deque storage deque) internal view returns (bool) {\\r\\n        return\\r\\n            deque._endSlot == deque._beginSlot &&\\r\\n            deque._endIndex == deque._beginIndex;\\r\\n    }\\r\\n\\r\\n    function _setData(\\r\\n        uint256 data_,\\r\\n        uint64 slot_,\\r\\n        uint16 value\\r\\n    ) private pure returns (uint256) {\\r\\n        return\\r\\n            (data_ & (~_getSlotMask(slot_))) + (uint256(value) << (16 * slot_));\\r\\n    }\\r\\n\\r\\n    function _getEntry(\\r\\n        uint256 data,\\r\\n        uint64 slot_\\r\\n    ) private pure returns (uint16) {\\r\\n        return uint16((data & _getSlotMask(slot_)) >> (16 * slot_));\\r\\n    }\\r\\n\\r\\n    function _getSlotMask(uint64 slot_) private pure returns (uint256) {\\r\\n        return SLOT_DATA_MASK << (slot_ * 16);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"IERC404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\r\\n\\r\\ninterface IERC404 is IERC165 {\\r\\n    event ERC20Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event ERC721Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n    event ERC20Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed amount\\r\\n    );\\r\\n    event ERC721Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    error NotFound();\\r\\n    error InvalidTokenId();\\r\\n    error AlreadyExists();\\r\\n    error InvalidRecipient();\\r\\n    error InvalidSender();\\r\\n    error InvalidSpender();\\r\\n    error InvalidOperator();\\r\\n    error UnsafeRecipient();\\r\\n    error RecipientIsERC721TransferExempt();\\r\\n    error Unauthorized();\\r\\n    error InsufficientAllowance();\\r\\n    error DecimalsTooLow();\\r\\n    error PermitDeadlineExpired();\\r\\n    error InvalidSigner();\\r\\n    error InvalidApproval();\\r\\n    error OwnedIndexOverflow();\\r\\n    error MintLimitReached();\\r\\n    error InvalidExemption();\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function erc20TotalSupply() external view returns (uint256);\\r\\n\\r\\n    function erc721TotalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner_) external view returns (uint256);\\r\\n\\r\\n    function erc721BalanceOf(address owner_) external view returns (uint256);\\r\\n\\r\\n    function erc20BalanceOf(address owner_) external view returns (uint256);\\r\\n\\r\\n    function erc721TransferExempt(address account_)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function isApprovedForAll(address owner_, address operator_)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function allowance(address owner_, address spender_)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function owned(address owner_) external view returns (uint256[] memory);\\r\\n\\r\\n    function ownerOf(uint256 id_) external view returns (address erc721Owner);\\r\\n\\r\\n    function tokenURI(uint256 id_) external view returns (string memory);\\r\\n\\r\\n    function approve(address spender_, uint256 valueOrId_)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function erc20Approve(address spender_, uint256 value_)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function erc721Approve(address spender_, uint256 id_) external;\\r\\n\\r\\n    function setApprovalForAll(address operator_, bool approved_) external;\\r\\n\\r\\n    function transferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 valueOrId_\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function erc20TransferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 value_\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function erc721TransferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 id_\\r\\n    ) external;\\r\\n\\r\\n    function transfer(address to_, uint256 amount_) external returns (bool);\\r\\n\\r\\n    function getERC721QueueLength() external view returns (uint256);\\r\\n\\r\\n    function getERC721TokensInQueue(uint256 start_, uint256 count_)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function setSelfERC721TransferExempt(bool state_) external;\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 id_\\r\\n    ) external;\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 id_,\\r\\n        bytes calldata data_\\r\\n    ) external;\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function permit(\\r\\n        address owner_,\\r\\n        address spender_,\\r\\n        uint256 value_,\\r\\n        uint256 deadline_,\\r\\n        uint8 v_,\\r\\n        bytes32 r_,\\r\\n        bytes32 s_\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Metadata} from \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC404UniswapV3ExemptFactoryMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC404UniswapV3ExemptWETH9Mismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExemption\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnedIndexOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitDeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientIsERC721TransferExempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenLoading\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC20Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptedAddress\",\"type\":\"address\"}],\"name\":\"ERC721Exempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unexemptedAddress\",\"type\":\"address\"}],\"name\":\"ERC721Unexempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_ENCODING_PREFIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOrId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"erc20Approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"erc20BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"erc20TransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"erc721Approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"erc721BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"}],\"name\":\"erc721TransferExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"erc721TransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC721QueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"name\":\"getERC721TokensInQueue\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"owned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721Owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"recoverERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setDataBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value_\",\"type\":\"bool\"}],\"name\":\"setERC721TransferExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state_\",\"type\":\"bool\"}],\"name\":\"setSelfERC721TransferExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOrId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapSwapRouter_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3NonfungiblePositionManager_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"units\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "harambe", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}